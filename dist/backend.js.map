{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/external \"require3\"","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/config/middleware/interception.js","webpack://backend/./backend/src/config/middleware/restructuring.js","webpack://backend/./backend/src/config/middleware/injection.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/party.js","webpack://backend/./backend/src/controller/partyPublic.js","webpack://backend/./backend/src/controller/test/atom/starLabel.js","webpack://backend/./backend/src/controller/test/atom/all.js","webpack://backend/./backend/src/controller/test/atom/publicFlow.js","webpack://backend/./backend/src/controller/test/atom/right.js","webpack://backend/./backend/src/controller/test/function/right.js","webpack://backend/./backend/src/controller/test/function/all.js","webpack://backend/./backend/src/controller/test/function/public.js","webpack://backend/./backend/src/controller/test/ctx/performAction.js","webpack://backend/./backend/src/controller/test/ctx/transaction.js","webpack://backend/./backend/src/controller/test/ctx/tail.js","webpack://backend/./backend/src/controller/test/ctx/session.js","webpack://backend/./backend/src/controller/test/ctx/request.js","webpack://backend/./backend/src/controller/test/ctx/response.js","webpack://backend/./backend/src/controller/test/ctx/config.js","webpack://backend/./backend/src/controller/test/ctx/locale.js","webpack://backend/./backend/src/controller/test/cache/mem.js","webpack://backend/./backend/src/controller/test/cache/db.js","webpack://backend/./backend/src/controller/test/role/userRole.js","webpack://backend/./backend/src/controller/test/event/hello.js","webpack://backend/./backend/src/controller/test/event/userVerify.js","webpack://backend/./backend/src/controller/test/feat/httpLog.js","webpack://backend/./backend/src/controller/test/feat/startup.js","webpack://backend/./backend/src/controller/test/feat/sendMail.js","webpack://backend/./backend/src/controller/test/feat/hook.js","webpack://backend/./backend/src/controller/test/feat/instance.js","webpack://backend/./backend/src/controller/test/feat/progress.js","webpack://backend/./backend/src/controller/test/feat/sequence.js","webpack://backend/./backend/src/controller/test/feat/settings.js","webpack://backend/./backend/src/controller/test/feat/status.js","webpack://backend/./backend/src/controller/test/feat/validation.js","webpack://backend/./backend/src/controller/test/feat/middleware.js","webpack://backend/./backend/src/controller/test/feat/queue.js","webpack://backend/./backend/src/controller/kitchen-sink/autocomplete.js","webpack://backend/./backend/src/controller/kitchen-sink/guide.js","webpack://backend/./backend/src/controller/kitchen-sink/form-schema-validation.js","webpack://backend/./backend/src/controller/kitchen-sink/ptr-is-loadmore.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/version/test.js","webpack://backend/./backend/src/service/version/testData.js","webpack://backend/./backend/src/service/party.js","webpack://backend/./backend/src/service/partyPublic.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/model/party.js","webpack://backend/./backend/src/model/partyType.js","webpack://backend/./backend/src/model/partyPublic.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/config/validation/schemas.js","webpack://backend/./backend/src/config/validation/keywords.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","config","locales","errors","middlewares","app","routes","services","models","meta","appInfo","env","startups","startupAll","type","path","startupInstance","instance","testInterception","global","dependencies","testRestructuring","testInjection","queues","queueTest","message","settings","groupInfo","slogan","user","username","groupExtra","panelExtra","mobile","sex","language","Party","Review","Reviewing","Reviewed","Birthday","Dance","Garden","Item","1001","1002","interception","restructuring","injection","async","ctx","next","a","b","request","body","undefined","throw","parseInt","__plus","version","party","partyPublic","testAtomStarLabel","testAtomAll","testAtomPublicFlow","testAtomRight","testFunctionRight","testFunctionAll","testFunctionPublic","testCtxPerformAction","testCtxTransaction","testCtxTail","testCtxSession","testCtxRequest","testCtxResponse","testCtxConfig","testCtxLocale","testCacheMem","testCacheDb","testRoleUserRole","testEventHello","testEventUserVerify","testFeatHttpLog","testFeatStartup","testFeatSendMail","testFeatHook","testFeatInstance","testFeatProgress","testFeatSequence","testFeatSettings","testFeatStatus","testFeatValidation","testFeatMiddleware","testFeatQueue","testKitchensinkAutocomplete","testKitchensinkGuide","testKitchensinkFormSchemaValidation","testKitchensinkPtrIsLoadMore","method","controller","isTest","isLocal","concat","auth","enable","right","action","validate","validator","schema","VersionController","Controller","this","service","update","success","init","test","PartyController","res","read","select","write","delete","types","PartyPublicController","assert","require3","StarLabelController","atomClass","atomClassName","op","partyKey","atom","item","atomName","equal","star","labels","parties","options","where","length","label","AllController","userIds","cache","mem","_testCheckList","actual","expected","userName","id","Tom","personCount","atomEnabled","val","orders","page","index","size","checkRightReads","atomId","checkRightRead","checkRightWrites","checkRightUpdate","constant","checkRightDeletes","checkRightCreates","checkRightCreate","checkRightActions_1","checkRightAction","Jane","checkRightActions_2","userAtoms","cb","atomCountExpected","PublicFlowController","flow","atomFlow","RightController","_atomClass","_atom","_function","functionCount","userTom","list","function","locale","titleLocale","function1","clearLocales","check","functions","passed","PublicController","pass","checkRightFunction","model","query","PerformActionController","performAction","url","TransactionController","atomKey","itemNew","TailController","_cache","tail","SessionController","session","_key1","_key2","RequestController","params","getInt","age","getStr","payload","getPayload","status","toString","ResponseController","successMore","fail","ConfigController","LocaleController","data","enus","text","zhcn","MemController","set","has","ms","remove","info","relativeName","Promise","resolve","setTimeout","DbController","db","moduleCache","UserRoleController","roleIds","role","getUserRolesDirect","userId","root","getUserRolesParent","getUserRolesExpand","userInRoleDirect","roleId","superuser","userInRoleParent","userInRoleExpand","system","moduleInfo","mockUtil","parseInfoFromPackage","__dirname","HelloController","event","invoke","break","extend","UserVerifyController","profileUser","profileId","provider","providerName","layout","login","loginOnStart","toolbar","tabbar","bottomMd","tabs","tabLinkActive","iconMaterial","HttpLogController","StartupController","console","log","SendMailController","mail","send","scene","to","subject","HookController","ctxCaller","InstanceController","ProgressController","progressId","progress","performActionInBackground","_levelOne","progressNo","done","err","error","current","total","util","sleep","_levelTwo","_levelThree","pMap","SequenceController","sequence","reset","moduleSequence","results","join","SettingsController","getUser","loadSettingsUser","saveSettingsUser","getInstance","loadSettingsInstance","saveSettingsInstance","StatusController","moduleStatus","ValidationController","TestController","QueueController","queue","pushAsync","subdomain","queueName","push","languages","AutocompleteController","filter","toLowerCase","indexOf","GuideController","markCount","Array","insert","iid","deleted","insertId","personCountA","FormSchemaValidationController","cacheName","_getCacheName","password","passwordAgain","avatar","rememberMe","saveSimple","gTestListMax","PtrIsLoadMoreController","items","itemId","title","assign","VersionTestFn","Version","Service","sql","partyType","roleFunctions","roleName","addRoleFunctionBatch","roleRights","scopeNames","addRoleRightBatch","versionTest","run","testData","_testRoles","_testRoleIncs","setDirty","_testUsers","_testRoleRights","_testCache","systemRoles","getSystemRole","leader","catalog","roleNameParent","roles","add","roleIdParent","roleIdInc","roleIncs","addRoleInc","users","realName","save","activated","addUserRole","_testAuths","userRoot","gPartyTypeEmojis","flags","summary","partyTypeName","_meta","_getMeta","partyTypeId","flag","atomFlag","empty","map","PartyPublic","Model","super","table","disableDeleted","PartyType","schemas","keywords","base","atoms","tableName","actions","review","code","1","2","search","createParty","autoRight","sorting","menu","listParty","kitchenSink","actionPath","validation","validators","partySearch","userTest","instanceTest","formTest","formCaptchaTest","settingsUser","settingsUserExtra","settingsInstance","indexes","testParty","public","declarations","hello","implementations","hook","before","route","after","providers","start","expression","properties","ebType","ebTitle","notEmpty","ebOptionsUrl","ebOptionTitleKey","ebOptionValueKey","ebOptionsBlankAuto","$ref","ebMultiple","ebOptions","ebParams","openIn","closeOnSelect","ebOptionsUrlParams","ebSecure","minLength","const","$data","Ajv","sch","parentSchema","func","context","arguments","callee","findIndex","keyword","ValidationError"],"mappings":"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","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"require3\");","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\n\nmodule.exports = app => {\n\n  // routes\n  const routes = require('./routes.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    meta,\n  };\n\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  if (appInfo.env === 'unittest') {\n    // startups\n    config.startups = {\n      startupAll: {\n        type: 'worker',\n        path: 'test/feat/startup/all',\n      },\n      startupInstance: {\n        type: 'worker',\n        instance: true,\n        path: 'test/feat/startup/instance',\n      },\n    };\n    // middlewares\n    config.middlewares = {\n      testInterception: {\n        global: false,\n        dependencies: 'instance',\n      },\n      testRestructuring: {\n        global: false,\n        dependencies: 'instance',\n      },\n      testInjection: {\n        global: false,\n        dependencies: 'instance',\n      },\n    };\n    // queues\n    config.queues = {\n      queueTest: {\n        path: 'test/feat/queue',\n      },\n    };\n  }\n\n  if (appInfo.env === 'unittest' || appInfo.env === 'local') {\n\n    // config\n    config.message = 'Hello World';\n\n    // settings\n    config.settings = {\n      instance: {\n        groupInfo: {\n          slogan: '',\n        },\n      },\n      user: {\n        groupInfo: {\n          username: 'zhennann',\n        },\n        groupExtra: {\n          panelExtra: {\n            groupInfo: {\n              mobile: '123',\n              sex: 1,\n              language: 'en-us',\n            },\n          },\n        },\n      },\n    };\n  }\n\n\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  Party: '宴会',\n  Review: '评审',\n  Reviewing: '评审中',\n  Reviewed: '已评审',\n  Birthday: '生日',\n  Dance: '跳舞',\n  Garden: '花园',\n  Item: '条目',\n  'Create Party': '新建宴会',\n  'Party List': '宴会列表',\n  'Level One': '层级1',\n  'Level Two': '层级2',\n  'Level Three': '层级3',\n  'Well Done': '干得好',\n  'Error Test': '错误测试',\n  'Hello World': '世界，您好',\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Error Test',\n  1002: 'Incomplete Parameters',\n};\n","const interception = require('./middleware/interception.js');\nconst restructuring = require('./middleware/restructuring.js');\nconst injection = require('./middleware/injection.js');\n\nmodule.exports = {\n  testInterception: interception,\n  testRestructuring: restructuring,\n  testInjection: injection,\n};\n","module.exports = () => {\n  return async function interception(ctx, next) {\n\n    const { a, b } = ctx.request.body;\n    if (a === undefined || b === undefined) return ctx.throw(1002); // 1002: 'Incomplete Parameters'\n\n    // next\n    await next();\n  };\n};\n","module.exports = () => {\n  return async function restructuring(ctx, next) {\n\n    const { a, b } = ctx.request.body;\n    ctx.request.body.a = parseInt(a);\n    ctx.request.body.b = parseInt(b);\n\n    // next\n    await next();\n  };\n};\n","module.exports = () => {\n  return async function injection(ctx, next) {\n\n    ctx.meta.__plus = (a, b) => {\n      return a + b;\n    };\n\n    // next\n    await next();\n  };\n};\n","const version = require('./controller/version.js');\nconst party = require('./controller/party.js');\nconst partyPublic = require('./controller/partyPublic.js');\nconst testAtomStarLabel = require('./controller/test/atom/starLabel.js');\nconst testAtomAll = require('./controller/test/atom/all.js');\nconst testAtomPublicFlow = require('./controller/test/atom/publicFlow.js');\nconst testAtomRight = require('./controller/test/atom/right.js');\nconst testFunctionRight = require('./controller/test/function/right.js');\nconst testFunctionAll = require('./controller/test/function/all.js');\nconst testFunctionPublic = require('./controller/test/function/public.js');\nconst testCtxPerformAction = require('./controller/test/ctx/performAction.js');\nconst testCtxTransaction = require('./controller/test/ctx/transaction.js');\nconst testCtxTail = require('./controller/test/ctx/tail.js');\nconst testCtxSession = require('./controller/test/ctx/session.js');\nconst testCtxRequest = require('./controller/test/ctx/request.js');\nconst testCtxResponse = require('./controller/test/ctx/response.js');\nconst testCtxConfig = require('./controller/test/ctx/config.js');\nconst testCtxLocale = require('./controller/test/ctx/locale.js');\nconst testCacheMem = require('./controller/test/cache/mem.js');\nconst testCacheDb = require('./controller/test/cache/db.js');\nconst testRoleUserRole = require('./controller/test/role/userRole.js');\nconst testEventHello = require('./controller/test/event/hello.js');\nconst testEventUserVerify = require('./controller/test/event/userVerify.js');\nconst testFeatHttpLog = require('./controller/test/feat/httpLog.js');\nconst testFeatStartup = require('./controller/test/feat/startup.js');\nconst testFeatSendMail = require('./controller/test/feat/sendMail.js');\nconst testFeatHook = require('./controller/test/feat/hook.js');\nconst testFeatInstance = require('./controller/test/feat/instance.js');\nconst testFeatProgress = require('./controller/test/feat/progress.js');\nconst testFeatSequence = require('./controller/test/feat/sequence.js');\nconst testFeatSettings = require('./controller/test/feat/settings.js');\nconst testFeatStatus = require('./controller/test/feat/status.js');\nconst testFeatValidation = require('./controller/test/feat/validation.js');\nconst testFeatMiddleware = require('./controller/test/feat/middleware.js');\nconst testFeatQueue = require('./controller/test/feat/queue.js');\nconst testKitchensinkAutocomplete = require('./controller/kitchen-sink/autocomplete.js');\nconst testKitchensinkGuide = require('./controller/kitchen-sink/guide.js');\nconst testKitchensinkFormSchemaValidation = require('./controller/kitchen-sink/form-schema-validation.js');\nconst testKitchensinkPtrIsLoadMore = require('./controller/kitchen-sink/ptr-is-loadmore.js');\n\nmodule.exports = app => {\n  let routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/test', controller: version, middlewares: 'test' },\n  ];\n  if (app.meta.isTest || app.meta.isLocal) {\n    routes = routes.concat([\n      // atom: party\n      { method: 'post', path: 'party/create', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/read', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/select', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/write', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/delete', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/action', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/enable', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/types', controller: party },\n\n      // atom: partyPublic (only for test)\n      { method: 'post', path: 'partyPublic/create', controller: partyPublic, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/read', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/select', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/write', controller: partyPublic, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/delete', controller: partyPublic, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/action', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/enable', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n\n      // test/atom/starLabel\n      { method: 'post', path: 'test/atom/starLabel', controller: testAtomStarLabel, middlewares: 'test' },\n      // test/atom/all\n      { method: 'post', path: 'test/atom/all', controller: testAtomAll, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/atom/publicFlow\n      { method: 'post', path: 'test/atom/publicFlow', controller: testAtomPublicFlow, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/atom/right(checked by middleware)\n      { method: 'post', path: 'test/atom/checkRightCreate', controller: testAtomRight, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 1 } },\n      },\n      { method: 'post', path: 'test/atom/checkRightRead', controller: testAtomRight, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 2 } },\n      },\n      { method: 'post', path: 'test/atom/checkRightWrite', controller: testAtomRight, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 3 } },\n      },\n      { method: 'post', path: 'test/atom/checkRightAction', controller: testAtomRight, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 101 } },\n      },\n\n      // test/function/right\n      { method: 'post', path: 'test/function/checkRightFunctionUser', controller: testFunctionRight, middlewares: 'test',\n        meta: { right: { type: 'function', module: 'a-baseadmin', name: 'user' } },\n      },\n      // test/function/all\n      { method: 'post', path: 'test/function/all', controller: testFunctionAll, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/function/public\n      { method: 'post', path: 'test/function/functionPublic', controller: testFunctionPublic, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/role/userRole\n      { method: 'post', path: 'test/role/userRole', controller: testRoleUserRole, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/ctx/performAction\n      { method: 'post', path: 'test/ctx/performAction', controller: testCtxPerformAction, middlewares: 'test' },\n      { method: 'post', path: 'test/ctx/performAction/echo', controller: testCtxPerformAction, middlewares: 'test' },\n      // test/ctx/transaction\n      { method: 'post', path: 'test/ctx/transaction', controller: testCtxTransaction, middlewares: 'test,transaction' },\n      // test/ctx/tail\n      { method: 'post', path: 'test/ctx/tail', controller: testCtxTail, middlewares: 'test' },\n      // test/ctx/session\n      { method: 'post', path: 'test/ctx/session', controller: testCtxSession, middlewares: 'test' },\n      { method: 'post', path: 'test/ctx/session/echo1', controller: testCtxSession, middlewares: 'test' },\n      { method: 'post', path: 'test/ctx/session/echo2', controller: testCtxSession, middlewares: 'test' },\n      // test/ctx/request\n      { method: 'post', path: 'test/ctx/request/:id', controller: testCtxRequest, action: 'request', middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/requestXML', controller: testCtxRequest, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/ctx/response\n      { method: 'post', path: 'test/ctx/response/success', controller: testCtxResponse, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/response/successMore', controller: testCtxResponse, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/response/fail', controller: testCtxResponse, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/response/throwError', controller: testCtxResponse, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/ctx/config\n      { method: 'post', path: 'test/ctx/config/test', controller: testCtxConfig, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/ctx/locale\n      { method: 'post', path: 'test/ctx/locale/enus', controller: testCtxLocale, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/locale/zhcn', controller: testCtxLocale, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/event/hello\n      { method: 'post', path: 'test/event/hello', controller: testEventHello, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/event/helloEcho', controller: testEventHello, middlewares: 'test,inner', meta: { auth: { enable: false } } },\n      // test/event/userVerify\n      { method: 'post', path: 'test/event/userVerify', controller: testEventUserVerify, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/event/loginInfo', controller: testEventUserVerify, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/cache\n      { method: 'post', path: 'test/cache/mem', controller: testCacheMem, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/cache/db', controller: testCacheDb, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/httpLog\n      { method: 'post', path: 'test/feat/httpLog', controller: testFeatHttpLog, middlewares: 'test,httpLog', meta: { auth: { enable: false } } },\n\n      // test/feat/startup\n      { method: 'post', path: 'test/feat/startup/all', controller: testFeatStartup, middlewares: 'inner', meta: { instance: { enable: false } } },\n      { method: 'post', path: 'test/feat/startup/instance', controller: testFeatStartup, middlewares: 'inner', meta: { auth: { enable: false } } },\n\n      // test/feat/sendMail\n      { method: 'post', path: 'test/feat/sendMail', controller: testFeatSendMail, middlewares: 'test,mail', meta: { auth: { enable: false } } },\n\n      // test/feat/hook\n      { method: 'post', path: 'test/feat/hook/echo', controller: testFeatHook, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/feat/hook/echoBefore', controller: testFeatHook, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/feat/hook/echoAfter', controller: testFeatHook, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/hook\n      { method: 'post', path: 'test/feat/instance', controller: testFeatInstance, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/progress\n      { method: 'post', path: 'test/feat/progress', controller: testFeatProgress, middlewares: 'progress', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/feat/progressInBackground', controller: testFeatProgress, middlewares: 'inner,progress', meta: { auth: { enable: false } } },\n\n      // test/feat/sequence\n      { method: 'post', path: 'test/feat/sequence', controller: testFeatSequence, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/settings\n      { method: 'post', path: 'test/feat/settings', controller: testFeatSettings, middlewares: 'test' },\n\n      // test/feat/status\n      { method: 'post', path: 'test/feat/status', controller: testFeatStatus, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/validation\n      { method: 'post', path: 'test/feat/validation/success', controller: testFeatValidation, middlewares: 'test,validate',\n        meta: { auth: { enable: false }, validate: { validator: 'userTest' } },\n      },\n      { method: 'post', path: 'test/feat/validation/fail', controller: testFeatValidation, middlewares: 'test,validate',\n        meta: { auth: { enable: false }, validate: { validator: 'userTest' } },\n      },\n      { method: 'post', path: 'test/feat/validation/schema', controller: testFeatValidation, middlewares: 'test,validate',\n        meta: { auth: { enable: false }, validate: { validator: 'userTest', schema: 'settingsUserExtra' } },\n      },\n\n      // test/feat/middleware\n      { method: 'post', path: 'test/feat/middleware/interception', controller: testFeatMiddleware, middlewares: 'test,testInterception' },\n      { method: 'post', path: 'test/feat/middleware/restructuring', controller: testFeatMiddleware, middlewares: 'test,testInterception,testRestructuring' },\n      { method: 'post', path: 'test/feat/middleware/injection', controller: testFeatMiddleware, middlewares: 'test,testInterception,testRestructuring,testInjection' },\n\n      // test/feat/queue\n      { method: 'post', path: 'test/feat/queue', controller: testFeatQueue, middlewares: 'inner' },\n      { method: 'post', path: 'test/feat/pushAsync', controller: testFeatQueue, middlewares: 'test' },\n      { method: 'post', path: 'test/feat/push', controller: testFeatQueue, middlewares: 'test' },\n\n      // kitchen-sink/guide\n      { method: 'post', path: 'kitchen-sink/guide/echo', controller: testKitchensinkGuide },\n      { method: 'post', path: 'kitchen-sink/guide/echo3', controller: testKitchensinkGuide },\n      { method: 'post', path: 'kitchen-sink/guide/echo4', controller: testKitchensinkGuide },\n      { method: 'post', path: 'kitchen-sink/guide/echo6', controller: testKitchensinkGuide },\n      { method: 'post', path: 'kitchen-sink/guide/echo7', controller: testKitchensinkGuide },\n      { method: 'post', path: 'kitchen-sink/guide/echo8', controller: testKitchensinkGuide, middlewares: 'transaction' },\n      { method: 'post', path: 'kitchen-sink/guide/echo9', controller: testKitchensinkGuide,\n        meta: {\n          right: { type: 'function', name: 'kitchenSink' },\n        },\n      },\n\n      // kitchen-sink/autocomplete\n      { method: 'get', path: 'kitchen-sink/autocomplete/languages/:query', controller: testKitchensinkAutocomplete, action: 'languages', meta: { auth: { enable: false } } },\n      // kitchen-sink/form-schema-validation\n      { method: 'get', path: 'kitchen-sink/form-schema-validation/load', controller: testKitchensinkFormSchemaValidation },\n      { method: 'post', path: 'kitchen-sink/form-schema-validation/saveSimple', controller: testKitchensinkFormSchemaValidation },\n      { method: 'post', path: 'kitchen-sink/form-schema-validation/saveValidation', controller: testKitchensinkFormSchemaValidation, middlewares: 'validate',\n        meta: { validate: { validator: 'formTest' } },\n      },\n      { method: 'post', path: 'kitchen-sink/form-captcha/signup', controller: testKitchensinkFormSchemaValidation, middlewares: 'validate,captchaVerify',\n        meta: { validate: { validator: 'formCaptchaTest' } },\n      },\n      // kitchen-sink/ptr-is-loadmore\n      { method: 'post', path: 'kitchen-sink/ptr-is-loadmore/list', controller: testKitchensinkPtrIsLoadMore },\n\n    ]);\n  }\n  return routes;\n};\n","module.exports = app => {\n\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async test() {\n      await this.service.version.test(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n\n  return VersionController;\n};\n","module.exports = app => {\n\n  class PartyController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.party.create(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async read() {\n      const res = await this.ctx.service.party.read(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async select() {\n      const res = await this.ctx.service.party.select(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async write() {\n      await this.ctx.service.party.write(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.party.delete(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async action() {\n      const res = await this.ctx.service.party.action(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async enable() {\n      const res = await this.ctx.service.party.enable(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async types() {\n      const res = await this.ctx.service.party.types(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n  }\n\n  return PartyController;\n};\n\n","module.exports = app => {\n\n  class PartyPublicController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.partyPublic.create(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async read() {\n      const res = await this.ctx.service.party.read(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async select() {\n      const res = await this.ctx.service.party.select(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async write() {\n      await this.ctx.service.partyPublic.write(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.partyPublic.delete(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async action() {\n      const res = await this.ctx.service.party.action(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async enable() {\n      const res = await this.ctx.service.party.enable(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n  }\n\n  return PartyPublicController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class StarLabelController extends app.Controller {\n\n    async starLabel() {\n      // atomClass\n      const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'party' });\n      // user\n      const user = this.ctx.user.op;\n\n      // add party:star\n      const partyKey = await this.ctx.meta.atom.create({\n        atomClass,\n        user,\n      });\n\n      // write party\n      await this.ctx.meta.atom.write({\n        key: partyKey,\n        item: { atomName: 'test:starLabel' },\n        user,\n      });\n\n      // get party\n      let party = await this.ctx.meta.atom.read({ key: partyKey, user });\n      assert.equal(party.star, null);\n      assert.equal(party.labels, null);\n\n      // set star/label\n      await this.ctx.meta.atom.star({ key: partyKey, atom: { star: 1 }, user });\n      await this.ctx.meta.atom.labels({ key: partyKey, atom: { labels: [ 1 ] }, user });\n\n      // get party\n      party = await this.ctx.meta.atom.read({ key: partyKey, user });\n      assert.equal(party.star, 1);\n      assert.equal(party.labels, '[1]');\n\n      // select parties\n      let parties = await this.ctx.meta.atom.select({\n        user,\n        options: {\n          star: 1,\n          where: { atomName: 'test:starLabel' },\n        },\n      });\n      assert.equal(parties.length, 1);\n\n      parties = await this.ctx.meta.atom.select({\n        user,\n        options: {\n          label: 1,\n          where: { atomName: 'test:starLabel' },\n        },\n      });\n      assert.equal(parties.length, 1);\n\n      parties = await this.ctx.meta.atom.select({\n        user,\n        options: {\n          label: 2,\n          where: { atomName: 'test:starLabel' },\n        },\n      });\n      assert.equal(parties.length, 0);\n\n      // clear star/label\n      await this.ctx.meta.atom.star({ key: partyKey, atom: { star: 0 }, user });\n      await this.ctx.meta.atom.labels({ key: partyKey, atom: { labels: null }, user });\n\n      // get party\n      party = await this.ctx.meta.atom.read({ key: partyKey, user });\n      assert.equal(party.star, null);\n      assert.equal(party.labels, null);\n\n      // delete party\n      await this.ctx.meta.atom.delete({ key: partyKey, user });\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return StarLabelController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class AllController extends app.Controller {\n\n    async all() {\n      // atomClass\n      const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'party' });\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n\n      // user->atom\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n        [ '', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom add party\n      const partyKey = await this.ctx.meta.atom.create({\n        atomClass,\n        user: { id: userIds.Tom },\n      });\n      await this.ctx.meta.atom.write({\n        key: partyKey,\n        item: { atomName: 'test:all', personCount: 3 },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n        [ '', 1 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom enable(submit) party\n      await this.ctx.meta.atom.enable({\n        key: partyKey,\n        atom: {\n          atomEnabled: 1,\n        },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 1 ],\n        [ 'Jimmy', 1 ],\n        [ 'Smith', 1 ],\n        [ '', 1 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom update party\n      await this.ctx.meta.atom.write({\n        key: partyKey,\n        item: { personCount: 8 },\n        user: { id: userIds.Tom },\n      });\n\n      // Tom get party\n      const party = await this.ctx.meta.atom.read({ key: partyKey, user: { id: userIds.Tom } });\n      assert.equal(party.personCount, 8);\n\n      // Tom list party\n      const parties = await this.ctx.meta.atom.select({\n        atomClass,\n        options: {\n          where: { atomName: { val: 'test:all', op: 'likeRight' } },\n          orders: [[ 'a.createdAt', 'desc' ]],\n          page: { index: 0, size: 0 },\n        },\n        user: { id: userIds.Tom },\n      });\n      assert.equal(parties.length, 1);\n\n      // checkRightRead\n      const checkRightReads = [[ 'Tom', partyKey.atomId, true ]];\n      for (const [ userName, atomId, right ] of checkRightReads) {\n        const res = await this.ctx.meta.atom.checkRightRead({\n          atom: { id: atomId },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightWrite\n      const checkRightWrites = [[ 'Tom', partyKey.atomId, true ], [ 'Tomson', partyKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightWrites) {\n        const res = await this.ctx.meta.atom.checkRightUpdate({\n          atom: { id: atomId, action: this.ctx.constant.module('a-base').atom.action.write },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightDelete\n      const checkRightDeletes = [[ 'Tom', partyKey.atomId, true ], [ 'Tomson', partyKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightDeletes) {\n        const res = await this.ctx.meta.atom.checkRightUpdate({\n          atom: { id: atomId, action: this.ctx.constant.module('a-base').atom.action.delete },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightCreate\n      const checkRightCreates = [[ 'Tom', true ], [ 'Jimmy', true ], [ 'Smith', false ]];\n      for (const [ userName, right ] of checkRightCreates) {\n        const res = await this.ctx.meta.atom.checkRightCreate({\n          atomClass,\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightAction:review(flag=1)\n      const checkRightActions_1 = [[ 'Tom', partyKey.atomId, false ], [ 'Jane', partyKey.atomId, true ]];\n      for (const [ userName, atomId, right ] of checkRightActions_1) {\n        const res = await this.ctx.meta.atom.checkRightAction({\n          atom: { id: atomId, action: 101 },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // action: review\n      await this.ctx.meta.atom.action({\n        action: 101,\n        key: partyKey,\n        user: { id: userIds.Jane },\n      });\n\n      // checkRightAction:review(flag=2)\n      const checkRightActions_2 = [[ 'Tom', partyKey.atomId, false ], [ 'Jane', partyKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightActions_2) {\n        const res = await this.ctx.meta.atom.checkRightAction({\n          atom: { id: atomId, action: 101 },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // action: review again\n      await this.ctx.meta.atom.action({\n        action: 101,\n        key: partyKey,\n        user: { id: userIds.Jane },\n      });\n\n      // Tom delete party\n      await this.ctx.meta.atom.delete({\n        key: partyKey,\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n        [ '', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // done\n      this.ctx.success();\n    }\n\n    async _testCheckList(userIds, userAtoms, cb) {\n      for (const [ userName, atomCountExpected ] of userAtoms) {\n        const list = await this.ctx.meta.atom.select({\n          options: {\n            where: {\n              atomName: 'test:all',\n              'b.module': 'test-party',\n            },\n            orders: null,\n            page: null,\n          },\n          user: userName ? { id: userIds[userName] } : null,\n        });\n        // callback\n        cb(list.length, atomCountExpected, userName);\n      }\n    }\n\n  }\n\n  return AllController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class PublicFlowController extends app.Controller {\n\n    async publicFlow() {\n      // atomClass\n      const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'partyPublic' });\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n\n      // user->atom\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom add party\n      const partyKey = await this.ctx.meta.atom.create({\n        atomClass,\n        user: { id: userIds.Tom },\n      });\n      await this.ctx.meta.atom.write({\n        key: partyKey,\n        item: { atomName: 'test:publicFlow' },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom enable(submit) party\n      await this.ctx.meta.atom.enable({\n        key: partyKey,\n        atom: {\n          atomEnabled: 1,\n        },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // checkRightRead 1\n      let checkRightReads = [[ 'Jane', partyKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightReads) {\n        const res = await this.ctx.meta.atom.checkRightRead({\n          atom: { id: atomId },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // close atomFlow\n      await this.ctx.meta.atom.flow({\n        key: partyKey,\n        atom: {\n          atomFlow: 0,\n        },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 1 ],\n        [ 'Jimmy', 1 ],\n        [ 'Smith', 1 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // checkRightRead 2\n      checkRightReads = [[ 'Jane', partyKey.atomId, true ]];\n      for (const [ userName, atomId, right ] of checkRightReads) {\n        const res = await this.ctx.meta.atom.checkRightRead({\n          atom: { id: atomId },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // Jane read party\n      const party = await this.ctx.meta.atom.read({ key: partyKey, user: { id: userIds.Jane } });\n      assert(party);\n\n      // Tom delete party\n      await this.ctx.meta.atom.delete({\n        key: partyKey,\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // done\n      this.ctx.success();\n    }\n\n    async _testCheckList(userIds, userAtoms, cb) {\n      for (const [ userName, atomCountExpected ] of userAtoms) {\n        const list = await this.ctx.meta.atom.select({\n          options: {\n            where: {\n              atomName: 'test:publicFlow',\n              'b.module': 'test-party',\n            },\n            orders: null,\n            page: null,\n          },\n          user: { id: userIds[userName] },\n        });\n        // callback\n        cb(list.length, atomCountExpected, userName);\n      }\n    }\n\n  }\n\n  return PublicFlowController;\n};\n\n","module.exports = app => {\n\n  class RightController extends app.Controller {\n\n    async checkRightCreate() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atomClass);\n    }\n\n    async checkRightRead() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atom);\n    }\n\n    async checkRightWrite() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atom);\n    }\n\n    async checkRightAction() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atom);\n    }\n\n  }\n\n  return RightController;\n};\n\n","module.exports = app => {\n\n  class RightController extends app.Controller {\n\n    async checkRightFunctionUser() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._function);\n    }\n\n  }\n\n  return RightController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nconst functionCount = 3;\n\nmodule.exports = app => {\n\n  class AllController extends app.Controller {\n\n    async all() {\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      const userTom = { id: userIds.Tom };\n\n      // Tom list all\n      let list = await this.ctx.meta.function.list({\n        options: {\n          where: { 'a.module': 'test-party' },\n          orders: [[ 'id', 'asc' ]],\n          page: { index: 0, size: 0 },\n          locale: '',\n        },\n        user: userTom,\n      });\n      assert.equal(list.length, functionCount);\n      assert(!list[0].titleLocale);\n\n      // Tom menu list zh-cn\n      list = await this.ctx.meta.function.list({\n        options: {\n          where: { 'a.module': 'test-party' },\n          orders: [[ 'id', 'asc' ]],\n          page: { index: 0, size: 0 },\n          locale: 'zh-cn',\n        },\n        user: userTom,\n      });\n      assert.equal(list.length, functionCount);\n      assert.equal(!!list[0].titleLocale, true);\n\n      // hold first\n      const function1 = list[0];\n\n      // clear locales\n      await this.ctx.meta.function.clearLocales();\n\n      // select star\n      list = await this.ctx.meta.function.list({\n        user: userTom,\n        options: {\n          where: { 'a.module': 'test-party' },\n          star: 1,\n          page: { index: 0, size: 0 },\n        },\n      });\n      assert.equal(list.length, 0);\n\n      // star 1\n      await this.ctx.meta.function.star({\n        id: function1.id,\n        star: 1,\n        user: userTom,\n      });\n      list = await this.ctx.meta.function.list({\n        user: userTom,\n        options: {\n          where: { 'a.module': 'test-party' },\n          star: 1,\n          page: { index: 0, size: 0 },\n        },\n      });\n      assert.equal(list.length, 1);\n\n      // star 0\n      await this.ctx.meta.function.star({\n        id: function1.id,\n        star: 0,\n        user: userTom,\n      });\n      list = await this.ctx.meta.function.list({\n        user: userTom,\n        options: {\n          where: { 'a.module': 'test-party' },\n          star: 1,\n          page: { index: 0, size: 0 },\n        },\n      });\n      assert.equal(list.length, 0);\n\n      // check\n      list = await this.ctx.meta.function.check({\n        functions: [\n          { module: function1.module, name: function1.name },\n        ],\n        user: userTom,\n      });\n      assert.equal(list[0].passed, true);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return AllController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class PublicController extends app.Controller {\n\n    async functionPublic() {\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      const userTom = { id: userIds.Tom };\n\n      // check right function\n      const pass = await this.ctx.meta.function.checkRightFunction({\n        function: {\n          module: 'test-party',\n          name: 'testFunctionPublic',\n        },\n        user: userTom,\n      });\n      assert.equal(!!pass, true);\n\n      // Tom list all\n      const list = await this.ctx.meta.function.list({\n        options: {\n          where: {\n            'a.module': 'test-party',\n            'a.public': 1,\n          },\n          orders: [[ 'id', 'asc' ]],\n          page: { index: 0, size: 0 },\n          locale: '',\n        },\n        user: userTom,\n      });\n      assert.equal(list.length, 1);\n\n      // delete function\n      await this.ctx.model.query('delete from aFunction where id=?', [ list[0].id ]);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return PublicController;\n};\n\n","module.exports = app => {\n\n  class PerformActionController extends app.Controller {\n\n    async performAction() {\n      // param: id\n      const id = this.ctx.request.body.id;\n      // performAction\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'test/ctx/performAction/echo',\n        body: {\n          id,\n        },\n      });\n      this.ctx.success(res);\n    }\n\n    async echo() {\n      // body: id\n      const id = this.ctx.request.body.id;\n      // echo back\n      this.ctx.success(id);\n    }\n\n  }\n\n  return PerformActionController;\n};\n\n","module.exports = app => {\n\n  class TransactionController extends app.Controller {\n\n    async transaction() {\n      // user\n      const user = this.ctx.user.op;\n      // atomKey\n      const atomKey = this.ctx.request.body.key;\n      // itemNew\n      const itemNew = this.ctx.request.body.item;\n\n      // write\n      await this.ctx.meta.atom.write({\n        key: atomKey,\n        item: { atomName: itemNew.atomName },\n        user,\n      });\n      // write: throw error when personCount is 0\n      await this.ctx.meta.atom.write({\n        key: atomKey,\n        item: { personCount: itemNew.personCount },\n        user,\n      });\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return TransactionController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class TailController extends app.Controller {\n\n    async tail() {\n      // 1\n      this.ctx.meta._cache = 1;\n\n      // tail\n      this.ctx.tail(() => {\n        assert.equal(this.ctx.meta._cache, 2);\n      });\n\n      // 2\n      this.ctx.meta._cache = 2;\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return TailController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class SessionController extends app.Controller {\n\n    async session() {\n      // key1\n      this.ctx.session._key1 = 1;\n      // echo1\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'test/ctx/session/echo1',\n      });\n      assert.equal(res.user.op.id, this.ctx.user.op.id);\n      assert.equal(res.instance.id, this.ctx.instance.id);\n      assert.equal(this.ctx.session._key2, 2);\n      // done\n      this.ctx.success();\n    }\n\n    async echo1() {\n      // echo2\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'test/ctx/session/echo2',\n      });\n      // echo back\n      this.ctx.success(res);\n    }\n\n    async echo2() {\n      // check\n      assert.equal(this.ctx.session._key1, 1);\n      // key2\n      this.ctx.session._key2 = 2;\n      // echo back\n      this.ctx.success({\n        user: this.ctx.user,\n        instance: this.ctx.instance,\n      });\n    }\n\n  }\n\n  return SessionController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class RequestController extends app.Controller {\n\n    async request() {\n      // param\n      assert.equal(this.ctx.params.id, '1');\n      assert.equal(this.ctx.getInt('id'), 1);\n\n      // query\n      assert.equal(this.ctx.query.age, '18');\n      assert.equal(this.ctx.getInt('age'), 18);\n\n      // body\n      assert.equal(this.ctx.request.body.userName, 'zhennann');\n      assert.equal(this.ctx.getStr('userName'), 'zhennann');\n\n      // done\n      this.ctx.success();\n    }\n\n    async requestXML() {\n      // payload\n      const payload = await this.ctx.getPayload();\n      // return\n      this.ctx.status = 200;\n      this.ctx.type = 'text/xml';\n      this.ctx.body = payload.toString();\n    }\n\n  }\n\n  return RequestController;\n};\n","module.exports = app => {\n\n  class ResponseController extends app.Controller {\n\n    async success() {\n      const res = {\n        userName: 'zhennann',\n      };\n      this.ctx.success(res);\n    }\n\n    async successMore() {\n      const page = this.ctx.request.body.page;\n      const items = [\n        { userName: 'zhennann' },\n        { userName: 'root' },\n      ];\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async fail() {\n      // Error Test\n      this.ctx.fail(1001);\n    }\n\n    async throwError() {\n      this.ctx.throw(1001);\n    }\n\n  }\n\n  return ResponseController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class ConfigController extends app.Controller {\n\n    async test() {\n      // current module\n      let message = this.ctx.config.message;\n      assert.equal(message, 'Hello World');\n\n      // other module\n      message = this.ctx.config.module('test-party').message;\n      assert.equal(message, 'Hello World');\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return ConfigController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class LocaleController extends app.Controller {\n\n    async enus() {\n      const message = this.ctx.config.message;\n      const data = {\n        enus: this.ctx.text(message),\n        zhcn: this.ctx.text.locale('zh-cn', message),\n      };\n\n      // done\n      this.ctx.success(data);\n    }\n\n    async zhcn() {\n      const message = this.ctx.config.message;\n      const data = {\n        zhcn: this.ctx.text(message),\n        enus: this.ctx.text.locale('en-us', message),\n      };\n\n      // done\n      this.ctx.success(data);\n    }\n\n  }\n\n  return LocaleController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class MemController extends app.Controller {\n\n    async mem() {\n\n      // name\n      const name = '__test:name';\n\n      // set\n      this.ctx.cache.mem.set(name, 'zhennann');\n\n      // has\n      let res = this.ctx.cache.mem.has(name);\n      assert.equal(!!res, true);\n\n      // get\n      let value = this.ctx.cache.mem.get(name);\n      assert.equal(value, 'zhennann');\n\n      // remove\n      this.ctx.cache.mem.remove(name);\n      res = this.ctx.cache.mem.has(name);\n      assert.equal(res, null);\n\n      // set with timeout\n      this.ctx.cache.mem.set(name, 'zhennann', 1000);\n\n      // get\n      value = this.ctx.cache.mem.get(name);\n      assert.equal(value, 'zhennann');\n\n      // other module's cache\n      const moduleCache = this.ctx.cache.mem.module(this.ctx.module.info.relativeName);\n      value = moduleCache.get(name);\n      assert.equal(value, 'zhennann');\n\n      // get after timeout\n      await sleep(1200);\n      value = this.ctx.cache.mem.get(name);\n      assert.equal(value, null);\n\n      // clear\n      //   not clear, hold other caches\n      // this.ctx.cache.mem.clear();\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n  return MemController;\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class DbController extends app.Controller {\n\n    async db() {\n\n      // name\n      const name = '__test:name';\n\n      // set\n      await this.ctx.cache.db.set(name, 'zhennann');\n\n      // has\n      let res = await this.ctx.cache.db.has(name);\n      assert.equal(!!res, true);\n\n      // get\n      let value = await this.ctx.cache.db.get(name);\n      assert.equal(value, 'zhennann');\n\n      // remove\n      await this.ctx.cache.db.remove(name);\n      res = await this.ctx.cache.db.has(name);\n      assert.equal(res, null);\n\n      // set with timeout\n      await this.ctx.cache.db.set(name, 'zhennann', 1000);\n\n      // get\n      value = await this.ctx.cache.db.get(name);\n      assert.equal(value, 'zhennann');\n\n      // other module's cache\n      const moduleCache = this.ctx.cache.db.module(this.ctx.module.info.relativeName);\n      value = await moduleCache.get(name);\n      assert.equal(value, 'zhennann');\n\n      // get after timeout\n      await sleep(1500);\n      value = await this.ctx.cache.db.get(name);\n      assert.equal(value, undefined);\n\n      // clear\n      //   not clear, hold other caches\n      // await this.ctx.cache.db.clear();\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n  return DbController;\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class UserRoleController extends app.Controller {\n\n    async userRole() {\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      // roleIds\n      const roleIds = this.ctx.cache.mem.get('roleIds');\n\n      // direct\n      let list = await this.ctx.meta.role.getUserRolesDirect({ userId: userIds.root });\n      assert.equal(list.length, 1);\n      // parent\n      list = await this.ctx.meta.role.getUserRolesParent({ userId: userIds.root });\n      assert.equal(list.length, 3);\n      // expand\n      list = await this.ctx.meta.role.getUserRolesExpand({ userId: userIds.root });\n      assert(list.length > 3);\n\n      // direct\n      let res = await this.ctx.meta.role.userInRoleDirect({\n        userId: userIds.root, roleId: roleIds.superuser,\n      });\n      assert.equal(res, true);\n      // parent\n      res = await this.ctx.meta.role.userInRoleParent({\n        userId: userIds.root, roleId: roleIds.root,\n      });\n      assert.equal(res, true);\n      // expand\n      res = await this.ctx.meta.role.userInRoleExpand({\n        userId: userIds.root, roleId: roleIds.system,\n      });\n      assert.equal(res, true);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return UserRoleController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n\n  class HelloController extends app.Controller {\n\n    async hello() {\n      const data = {\n        text: 'hello',\n      };\n      const res = await this.ctx.meta.event.invoke({\n        module: moduleInfo.relativeName, name: 'hello', data,\n      });\n      assert.equal(data.text, 'hello echo');\n      assert.equal(res, 'returnValue');\n      this.ctx.success(res);\n    }\n\n    async helloEcho() {\n      const event = this.ctx.request.body.event;\n      const data = this.ctx.request.body.data;\n      data.text = 'hello echo';\n      event.break = true;\n      this.ctx.success('returnValue');\n    }\n\n  }\n\n  return HelloController;\n};\n\n","const require3 = require('require3');\nconst extend = require3('extend2');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class UserVerifyController extends app.Controller {\n\n    async userVerify() {\n      const data = this.ctx.request.body.data;\n      // console.log('onUserVerify profileId: ', data.profileUser.profileId);\n      assert(data.profileUser.profileId > 0);\n      this.ctx.success();\n    }\n\n    async loginInfo() {\n      // change the config of mobile layout by checking the user's login status\n      const data = this.ctx.request.body.data;\n      const info = data.info;\n      const provider = info.user && info.user.provider;\n      if (provider && provider.module === 'a-authgithub' && provider.providerName === 'authgithub') {\n        info.config = extend(true, info.config, {\n          modules: {\n            'a-layoutmobile': {\n              layout: {\n                login: '/a/login/login',\n                loginOnStart: true,\n                toolbar: {\n                  tabbar: true, labels: true, bottomMd: true,\n                },\n                tabs: [\n                  { name: 'Mine', tabLinkActive: true, iconMaterial: 'person', url: '/a/user/user/mine' },\n                ],\n              },\n            },\n          },\n        });\n      }\n      this.ctx.success();\n    }\n\n  }\n\n  return UserVerifyController;\n};\n\n","module.exports = app => {\n\n  class HttpLogController extends app.Controller {\n\n    async httpLog() {\n      // please see: {projectDir}/src/backend/logs/{projectName}/{projectName}-web.log\n      this.ctx.success('this is a test for httpLog');\n    }\n\n  }\n\n  return HttpLogController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class StartupController extends app.Controller {\n\n    async all() {\n      console.log('test/feat/startup: all');\n      assert.equal(this.ctx.instance, undefined);\n      this.ctx.success();\n    }\n\n    async instance() {\n      console.log(`test/feat/startup: instance:${this.ctx.instance.id}`);\n      assert(this.ctx.instance.id > 0);\n      this.ctx.success();\n    }\n\n  }\n\n  return StartupController;\n};\n","module.exports = app => {\n\n  class SendMailController extends app.Controller {\n\n    async sendMail() {\n      // send\n      await this.ctx.meta.mail.send({\n        scene: 'test',\n        message: {\n          to: 'test@cabloy.com',\n          subject: 'this is a test',\n          text: 'message body!',\n        },\n      });\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return SendMailController;\n\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class HookController extends app.Controller {\n\n    async echo() {\n      const data = this.ctx.request.body.data;\n      assert.equal(data.text, 'before');\n      data.text = 'before:echo';\n      this.ctx.success();\n    }\n\n    async echoBefore() {\n      const ctxCaller = this.ctx.ctxCaller;\n      ctxCaller.request.body.data = { text: 'before' };\n      this.ctx.success();\n    }\n    async echoAfter() {\n      const ctxCaller = this.ctx.ctxCaller;\n      const data = ctxCaller.request.body.data;\n      assert.equal(data.text, 'before:echo');\n      this.ctx.success();\n    }\n\n  }\n\n  return HookController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class InstanceController extends app.Controller {\n\n    async instance() {\n      assert.equal(!!this.ctx.instance.id, true);\n      assert.equal(!!this.ctx.instance.config, true);\n      this.ctx.success();\n    }\n\n  }\n  return InstanceController;\n};\n","module.exports = app => {\n\n  class ProgressController extends app.Controller {\n\n    async progress() {\n      // create progress\n      const progressId = await this.ctx.meta.progress.create();\n      // background\n      this.ctx.performActionInBackground({\n        method: 'post',\n        url: 'test/feat/progressInBackground',\n        body: {\n          progressId,\n        },\n      });\n      // return progressId\n      this.ctx.success({ progressId });\n    }\n\n    async progressInBackground() {\n      const progressId = this.ctx.request.body.progressId;\n      try {\n        // level one\n        await this._levelOne({ progressId, progressNo: 0 });\n        // progress done\n        await this.ctx.meta.progress.done({ progressId, message: this.ctx.text('Well Done') });\n        // ok\n        this.ctx.success(true);\n      } catch (err) {\n        // progress error\n        await this.ctx.meta.progress.error({ progressId, message: err.message });\n        // throw err\n        throw err;\n      }\n    }\n\n    async _levelOne({ progressId, progressNo }) {\n      const total = 2;\n      let current = 0;\n      for (let i = 0; i < total; i++) {\n        const text = `${this.ctx.text('Level One')}: ${i + 1}`;\n        await this.ctx.meta.progress.update({\n          progressId,\n          progressNo,\n          total,\n          progress: current++,\n          text,\n        });\n        // sleep\n        await this.ctx.meta.util.sleep(1500);\n        // level two\n        await this._levelTwo({ progressId, progressNo: progressNo + 1 });\n      }\n    }\n\n    async _levelTwo({ progressId, progressNo }) {\n      const total = 2;\n      let current = 0;\n      for (let i = 0; i < total; i++) {\n        const text = `${this.ctx.text('Level Two')}: ${i + 1}`;\n        await this.ctx.meta.progress.update({\n          progressId,\n          progressNo,\n          total,\n          progress: current++,\n          text,\n        });\n        // sleep\n        await this.ctx.meta.util.sleep(1500);\n        // level two\n        await this._levelThree({ progressId, progressNo: progressNo + 1 });\n      }\n    }\n\n    async _levelThree({ progressId, progressNo }) {\n      const total = 3;\n      let current = 0;\n      for (let i = 0; i < total; i++) {\n        const text = `${this.ctx.text('Level Three')}: ${i + 1}`;\n        await this.ctx.meta.progress.update({\n          progressId,\n          progressNo,\n          total,\n          progress: current++,\n          text,\n        });\n        // sleep\n        await this.ctx.meta.util.sleep(1500);\n      }\n    }\n\n  }\n  return ProgressController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\nconst pMap = require3('p-map');\n\nmodule.exports = app => {\n\n  class SequenceController extends app.Controller {\n\n    async sequence() {\n\n      // current\n      let current = await this.ctx.meta.sequence.current('test');\n      assert.equal(current, 0);\n\n      // next\n      let next = await this.ctx.meta.sequence.next('test');\n      assert.equal(next, 1);\n\n      // current\n      current = await this.ctx.meta.sequence.current('test');\n      assert.equal(current, 1);\n\n      // reset\n      await this.ctx.meta.sequence.reset('test');\n\n      // other module's sequence\n      const moduleSequence = this.ctx.meta.sequence.module(this.ctx.module.info.relativeName);\n\n      // next\n      next = await moduleSequence.next('test');\n      assert.equal(next, 1);\n\n      // current\n      current = await moduleSequence.current('test');\n      assert.equal(current, 1);\n\n      // reset\n      await moduleSequence.reset('test');\n\n      // concurrency\n      const results = await pMap([ 1, 2, 3, 4, 5 ], async () => {\n        return await moduleSequence.next('test');\n      });\n      assert.equal(results.join(','), '1,2,3,4,5');\n\n      // reset\n      await moduleSequence.reset('test');\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n  return SequenceController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class SettingsController extends app.Controller {\n\n    async settings() {\n\n      // user\n\n      // get settings from config\n      let data = await this.ctx.meta.settings.getUser({ name: '/groupInfo/username' });\n      assert.equal(data, 'zhennann');\n      data = await this.ctx.meta.settings.getUser({ name: '/groupExtra/panelExtra/groupInfo/language' });\n      assert.equal(data, 'en-us');\n\n      // load settings\n      data = await this.ctx.meta.settings.loadSettingsUser();\n      assert.equal(data.groupInfo.username, 'zhennann');\n      // save settings\n      data.groupExtra.panelExtra.groupInfo.language = 'zh-cn';\n      await this.ctx.meta.settings.saveSettingsUser({ data });\n\n      // get settings from db\n      data = await this.ctx.meta.settings.getUser({ name: '/groupExtra/panelExtra/groupInfo/language' });\n      assert.equal(data, 'zh-cn');\n\n      // instance\n\n      // get settings from config\n      data = await this.ctx.meta.settings.getInstance({ name: '/groupInfo/slogan' });\n      assert.equal(data, '');\n\n      // load settings\n      data = await this.ctx.meta.settings.loadSettingsInstance();\n      assert.equal(data.groupInfo.slogan, '');\n      // save settings\n      data.groupInfo.slogan = 'Less is more, while more is less';\n      await this.ctx.meta.settings.saveSettingsInstance({ data });\n\n      // get settings from db\n      data = await this.ctx.meta.settings.getInstance({ name: '/groupInfo/slogan' });\n      assert.equal(data, 'Less is more, while more is less');\n\n      // ok\n      this.ctx.success();\n    }\n\n  }\n  return SettingsController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class StatusController extends app.Controller {\n\n    async status() {\n\n      // name\n      const name = '__test_enable';\n\n      // get\n      let value = await this.ctx.meta.status.get(name);\n      assert.equal(value, undefined);\n\n      // set\n      await this.ctx.meta.status.set(name, true);\n\n      // get\n      value = await this.ctx.meta.status.get(name);\n      assert.equal(value, true);\n\n      // other module's status\n      const moduleStatus = this.ctx.meta.status.module(this.ctx.module.info.relativeName);\n      value = await moduleStatus.get(name);\n      assert.equal(value, true);\n\n      // set\n      await this.ctx.meta.status.set(name, false);\n\n      // get\n      value = await this.ctx.meta.status.get(name);\n      assert.equal(value, false);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n  return StatusController;\n};\n\n","module.exports = app => {\n\n  class ValidationController extends app.Controller {\n\n    async success() {\n      this.ctx.success();\n    }\n\n    async fail() {\n      this.ctx.success();\n    }\n\n    async schema() {\n      this.ctx.success();\n    }\n\n  }\n\n  return ValidationController;\n};\n\n","module.exports = app => {\n\n  class TestController extends app.Controller {\n\n    async interception() {\n      const { a, b } = this.ctx.request.body;\n      const c = parseInt(a) + parseInt(b);\n      this.ctx.success(c);\n    }\n\n    async restructuring() {\n      const { a, b } = this.ctx.request.body;\n      const c = a + b;\n      this.ctx.success(c);\n    }\n\n    async injection() {\n      const { a, b } = this.ctx.request.body;\n      const c = this.ctx.meta.__plus(a, b);\n      this.ctx.success(c);\n    }\n\n  }\n\n  return TestController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class QueueController extends app.Controller {\n\n    async queue() {\n      const { a, b } = this.ctx.request.body;\n      const c = a + b;\n      this.ctx.success(c);\n    }\n\n    async pushAsync() {\n      const res = await this.ctx.app.meta.queue.pushAsync({\n        subdomain: this.ctx.subdomain,\n        module: 'test-party',\n        queueName: 'queueTest',\n        data: { a: 1, b: 2 },\n      });\n      assert.equal(res, 3);\n      this.ctx.success();\n    }\n\n    async push() {\n      this.ctx.app.meta.queue.push({\n        subdomain: this.ctx.subdomain,\n        module: 'test-party',\n        queueName: 'queueTest',\n        data: { a: 1, b: 2 },\n      });\n      this.ctx.success();\n    }\n\n  }\n\n  return QueueController;\n\n};\n","const languages = require('./data/autocomplete-languages.json');\n\nmodule.exports = app => {\n\n  class AutocompleteController extends app.Controller {\n\n    async languages() {\n      const query = this.ctx.params.query;\n      let data;\n      if (!query) {\n        data = [];\n      } else {\n        data = languages.filter(item => {\n          return item.name.toLowerCase().indexOf(query.toLowerCase()) === 0;\n        });\n      }\n      this.ctx.success(data);\n    }\n\n  }\n\n  return AutocompleteController;\n};\n\n","module.exports = app => {\n\n  class GuideController extends app.Controller {\n\n    async echo() {\n      const message = 'Hello World';\n      this.ctx.success(message);\n    }\n\n    async echo2() {\n      const message = this.ctx.config.message;\n      this.ctx.success(message);\n    }\n\n    async echo3() {\n      const message = this.ctx.text('Hello World');\n      this.ctx.success(message);\n    }\n\n    async echo4() {\n      const { message, markCount } = this.ctx.request.body;\n      const res = `${message}${new Array(markCount + 1).join('!')}`;\n      this.ctx.success(res);\n    }\n\n    async echo6() {\n      // testParty: insert/udpate/delete/get\n\n      // insert\n      const res = await this.ctx.db.insert('testParty', {\n        iid: this.ctx.instance.id,\n        deleted: 0,\n        personCount: 3,\n      });\n      const id = res.insertId;\n      // update\n      await this.ctx.db.update('testParty', {\n        id,\n        personCount: 5,\n      });\n      // get\n      const item = await this.ctx.db.get('testParty', {\n        id,\n      });\n      // delete\n      await this.ctx.db.delete('testParty', {\n        id,\n      });\n      // ok\n      this.ctx.success(item);\n    }\n\n    async echo7() {\n      // testParty: insert/udpate/delete/get\n\n      // insert\n      const res = await this.ctx.model.party.insert({ personCount: 3 });\n      const id = res.insertId;\n      // update\n      await this.ctx.model.party.update({ id, personCount: 6 });\n      // get\n      const item = await this.ctx.model.party.get({ id });\n      // delete\n      await this.ctx.model.party.delete({ id });\n      // ok\n      this.ctx.success(item);\n    }\n\n    async echo8() {\n      // transaction\n\n      // insert\n      const res = await this.ctx.model.party.insert({ personCount: 3 });\n      const id = res.insertId;\n      // will throw error\n      await this.ctx.model.party.update({ id, personCountA: 6 });\n      // never here\n      this.ctx.success();\n    }\n\n    async echo9() {\n      // Menu Authorization\n      // ok\n      this.ctx.success('ok');\n    }\n\n  }\n\n  return GuideController;\n};\n\n","module.exports = app => {\n\n  class FormSchemaValidationController extends app.Controller {\n\n    async load() {\n      // try load from db cache\n      const cacheName = this._getCacheName();\n      let item = await this.ctx.cache.db.get(cacheName);\n      if (!item) {\n        item = {\n          userName: '',\n          password: '',\n          passwordAgain: '',\n          sex: 0,\n          language: '',\n          avatar: '',\n          rememberMe: false,\n        };\n      }\n      // ok\n      this.ctx.success(item);\n    }\n\n    async saveSimple() {\n      // item\n      const item = this.ctx.request.body.data;\n      // save to db cache\n      const cacheName = this._getCacheName();\n      await this.ctx.cache.db.set(cacheName, item);\n      // ok\n      this.ctx.success();\n    }\n\n    async saveValidation() {\n      await this.saveSimple();\n    }\n\n    // form-captcha signup\n    signup() {\n      this.ctx.success();\n    }\n\n    _getCacheName() {\n      // get the operation user\n      const user = this.ctx.user.op;\n      return `__formTest:${user.id}`;\n    }\n\n  }\n\n  return FormSchemaValidationController;\n};\n\n","\nconst gTestListMax = 89;\n\nmodule.exports = app => {\n\n  class PtrIsLoadMoreController extends app.Controller {\n\n    async list() {\n      // page\n      let page = this.ctx.request.body.page;\n      // adjust page\n      page = this.ctx.meta.util.page(page, false);\n      // items\n      const items = [];\n      for (let i = 0; i < page.size; i++) {\n        const itemId = page.index + i + 1;\n        if (itemId > gTestListMax) break;\n        items.push({\n          id: itemId,\n          title: `${this.ctx.text('Item')} - ${itemId}`,\n        });\n      }\n      // ok\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n  }\n\n  return PtrIsLoadMoreController;\n};\n\n","const version = require('./service/version.js');\nconst party = require('./service/party.js');\nconst partyPublic = require('./service/partyPublic.js');\n\nmodule.exports = app => {\n  const services = {\n    version,\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    Object.assign(services, {\n      party,\n      partyPublic,\n    });\n  }\n  return services;\n};\n","const VersionTestFn = require('./version/test.js');\n\nmodule.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n      // only in test/local\n      if (!this.app.meta.isTest && !this.app.meta.isLocal) return;\n\n      // update\n      if (options.version === 1) {\n        let sql = `\n          CREATE TABLE testParty (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            personCount int(11) DEFAULT '0',\n            partyTypeId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE TABLE testPartyType (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            name varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE VIEW testPartyView as\n            select a.*,b.name as partyTypeName from testParty a\n              left join testPartyType b on a.partyTypeId=b.id\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE TABLE testPartyPublic (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {\n      // only in test/local\n      if (!this.app.meta.isTest && !this.app.meta.isLocal) return;\n\n      // init\n      if (options.version === 1) {\n        // types\n        for (const name of [ 'Birthday', 'Dance', 'Garden' ]) {\n          await this.ctx.model.partyType.insert({ name });\n        }\n      }\n\n      //\n      if (options.version === 2) {\n        // // roleFunctions\n        // const roleRoot = await this.ctx.meta.role.getSystemRole({ roleName: 'root' });\n        // const functions = [ 'kichenSink' ];\n        // for (const functionName of functions) {\n        //   const func = await this.ctx.meta.function.get({\n        //     name: functionName,\n        //   });\n        //   await this.ctx.meta.role.addRoleFunction({\n        //     roleId: roleRoot.id,\n        //     functionId: func.id,\n        //   });\n        // }\n      }\n\n      //\n      if (options.version === 3) {\n        // delete old function\n        await this.ctx.meta.function.delete({ name: 'kichenSink' });\n\n        // roleFunctions\n        const roleFunctions = [\n          { roleName: 'root', name: 'kitchenSink' },\n        ];\n        await this.ctx.meta.role.addRoleFunctionBatch({ roleFunctions });\n      }\n\n      //\n      if (options.version === 4) {\n        // add role rights\n        const roleRights = [\n          { roleName: 'system', action: 'create' },\n          { roleName: 'system', action: 'write', scopeNames: 0 },\n          { roleName: 'system', action: 'delete', scopeNames: 0 },\n          { roleName: 'system', action: 'read', scopeNames: 'authenticated' },\n          { roleName: 'system', action: 'review', scopeNames: 'authenticated' },\n        ];\n        await this.ctx.meta.role.addRoleRightBatch({ atomClassName: 'party', roleRights });\n      }\n\n    }\n\n    async test() {\n      const versionTest = new (VersionTestFn(this.ctx))();\n      await versionTest.run();\n    }\n\n  }\n\n  return Version;\n};\n","const testData = require('./testData.js');\n\nmodule.exports = function(ctx) {\n\n  class VersionTest {\n\n    async run() {\n\n      // roles\n      const roleIds = await this._testRoles();\n\n      // role includes\n      await this._testRoleIncs(roleIds);\n\n      // set role dirty\n      await ctx.meta.role.setDirty(true);\n\n      // users\n      const userIds = await this._testUsers(roleIds);\n\n      // role rights\n      await this._testRoleRights(roleIds);\n\n      // cache\n      this._testCache(roleIds, userIds);\n    }\n\n    _testCache(roleIds, userIds) {\n      // cache roles\n      ctx.cache.mem.set('roleIds', roleIds);\n      // cache users\n      ctx.cache.mem.set('userIds', userIds);\n    }\n\n    // roles\n    async _testRoles() {\n      const roleIds = {};\n      // system roles\n      for (const roleName of ctx.constant.module('a-base').systemRoles) {\n        const role = await ctx.meta.role.getSystemRole({ roleName });\n        roleIds[roleName] = role.id;\n      }\n      // roles\n      for (const [ roleName, leader, catalog, roleNameParent ] of testData.roles) {\n        roleIds[roleName] = await ctx.meta.role.add({\n          roleName,\n          leader,\n          catalog,\n          roleIdParent: roleIds[roleNameParent],\n        });\n      }\n\n      return roleIds;\n    }\n\n    // role incs\n    async _testRoleIncs(roleIds) {\n      for (const [ roleId, roleIdInc ] of testData.roleIncs) {\n        await ctx.meta.role.addRoleInc({\n          roleId: roleIds[roleId],\n          roleIdInc: roleIds[roleIdInc],\n        });\n      }\n    }\n\n    // users\n    async _testUsers(roleIds) {\n      // userIds\n      const userIds = {};\n      for (const [ userName, roleName ] of testData.users) {\n        // add\n        userIds[userName] = await ctx.meta.user.add({\n          userName,\n          realName: userName,\n        });\n        // activated\n        await ctx.meta.user.save({\n          user: { id: userIds[userName], activated: 1 },\n        });\n        // role\n        await ctx.meta.role.addUserRole({\n          userId: userIds[userName],\n          roleId: roleIds[roleName],\n        });\n      }\n\n      // auths\n      await this._testAuths(userIds);\n\n      // root\n      const userRoot = await ctx.meta.user.get({ userName: 'root' });\n      userIds.root = userRoot.id;\n      return userIds;\n    }\n\n    // role rights\n    async _testRoleRights() {\n      await ctx.meta.role.addRoleRightBatch({ atomClassName: 'party', roleRights: testData.roleRights });\n    }\n\n    // auths\n    async _testAuths(userIds) {\n      for (const userName in userIds) {\n        await ctx.performAction({\n          method: 'post',\n          url: '/a/authsimple/auth/add',\n          body: {\n            userId: userIds[userName],\n            password: '',\n          },\n        });\n      }\n    }\n\n  }\n\n  return VersionTest;\n};\n","// roleName, leader, catalog, roleNameParent\nconst roles = [\n  [ 'friend', 0, 0, 'external' ],\n  [ 'consultant', 0, 1, 'external' ],\n  [ 'study', 0, 0, 'consultant' ],\n  [ 'work', 0, 0, 'consultant' ],\n  [ 'life', 0, 0, 'consultant' ],\n  [ 'family', 0, 1, 'internal' ],\n  [ 'father', 0, 0, 'family' ],\n  [ 'mother', 1, 0, 'family' ],\n  [ 'son', 0, 0, 'family' ],\n  [ 'daughter', 0, 0, 'family' ],\n];\n\n// friend->family\nconst roleIncs = [\n  [ 'friend', 'family' ],\n];\n\n// family and friend\n//   userName, roleName\nconst users = [\n  [ 'Tom', 'father' ], [ 'Jane', 'mother' ], [ 'Tomson', 'son' ], [ 'Jannie', 'daughter' ],\n  [ 'Jimmy', 'friend' ], [ 'Rose', 'friend' ],\n  [ 'Smith', 'life' ],\n];\n\n// roleRights\nconst roleRights = [\n  { roleName: 'family', action: 'create' },\n  { roleName: 'family', action: 'read', scopeNames: 'family' },\n  { roleName: 'mother', action: 'review', scopeNames: 'family' },\n  { roleName: 'authenticated', action: 'write', scopeNames: 0 },\n  { roleName: 'authenticated', action: 'delete', scopeNames: 0 },\n  { roleName: 'consultant', action: 'read', scopeNames: 'family' },\n];\n\nmodule.exports = {\n  roles,\n  roleIncs,\n  users,\n  roleRights,\n};\n","module.exports = app => {\n\n  const gPartyTypeEmojis = {\n    Birthday: '🎂',\n    Dance: '💃',\n    Garden: '🏡',\n  };\n\n  class Party extends app.Service {\n\n    async create({ atomClass, key, item, user }) {\n      // add party\n      const res = await this.ctx.model.party.insert({\n        atomId: key.atomId,\n      });\n      return { atomId: key.atomId, itemId: res.insertId };\n    }\n\n    _getMeta(item) {\n      // flags\n      const flags = [];\n      if (item.personCount) {\n        flags.push(item.personCount);\n      }\n      // summary\n      let summary;\n      if (item.partyTypeName) {\n        summary = `${gPartyTypeEmojis[item.partyTypeName]}${this.ctx.text(item.partyTypeName)}`;\n      }\n      // meta\n      const meta = {\n        flags,\n        summary,\n      };\n      // ok\n      item._meta = meta;\n    }\n\n    async read({ atomClass, key, item, user }) {\n      // read\n      this._getMeta(item);\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // select\n      for (const item of items) {\n        this._getMeta(item);\n      }\n    }\n\n    async write({ atomClass, key, item, user }) {\n      // update party\n      await this.ctx.model.party.update({\n        id: key.itemId,\n        personCount: item.personCount,\n        partyTypeId: item.partyTypeId,\n      });\n    }\n\n    async delete({ atomClass, key, user }) {\n      // delete party\n      await this.ctx.model.party.delete({\n        id: key.itemId,\n      });\n    }\n\n    async action({ action, atomClass, key, user }) {\n      if (action === 101) {\n        // change flag\n        await this.ctx.meta.atom.flag({\n          key,\n          atom: { atomFlag: 2 },\n          user,\n        });\n      }\n    }\n\n    async enable({ atomClass, key, atom, user }) {\n      // enable\n      const atomFlag = atom.atomEnabled ? 1 : 0;\n      // change flag\n      await this.ctx.meta.atom.flag({\n        key,\n        atom: { atomFlag },\n        user,\n      });\n    }\n\n    async types({ empty }) {\n      const items = await this.ctx.model.partyType.select();\n      return items.map(item => {\n        return {\n          id: item.id,\n          name: this.ctx.text(item.name),\n        };\n      });\n    }\n\n  }\n\n  return Party;\n};\n","module.exports = app => {\n\n  class PartyPublic extends app.Service {\n\n    async create({ atomClass, key, item, user }) {\n      const res = await this.ctx.model.partyPublic.insert({\n        atomId: key.atomId,\n      });\n      return { atomId: key.atomId, itemId: res.insertId };\n    }\n\n    async read({ atomClass, key, item, user }) {\n    }\n\n    async select({ atomClass, options, items, user }) {\n    }\n\n    async write({ atomClass, key, item, user }) {\n    }\n\n    async delete({ atomClass, key, user }) {\n      await this.ctx.model.partyPublic.delete({\n        id: key.itemId,\n      });\n    }\n\n    async action({ action, atomClass, key, user }) {\n    }\n\n    async enable({ atomClass, key, atom, user }) {\n    }\n\n  }\n\n  return PartyPublic;\n};\n","const party = require('./model/party.js');\nconst partyType = require('./model/partyType.js');\nconst partyPublic = require('./model/partyPublic.js');\n\nmodule.exports = app => {\n  const models = {\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    Object.assign(models, {\n      party,\n      partyType,\n      partyPublic,\n    });\n  }\n  return models;\n};\n","module.exports = app => {\n\n  class Party extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testParty', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return Party;\n};\n","module.exports = app => {\n\n  class PartyType extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testPartyType', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return PartyType;\n};\n","module.exports = app => {\n\n  class PartyPublic extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testPartyPublic', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return PartyPublic;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nmodule.exports = app => {\n  const meta = {\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    // schemas\n    const schemas = require('./config/validation/schemas.js')(app);\n    // keywords\n    const keywords = require('./config/validation/keywords.js')(app);\n    // meta\n    extend(true, meta, {\n      base: {\n        atoms: {\n          party: {\n            info: {\n              title: 'Party',\n              tableName: 'testPartyView',\n              flow: 0,\n            },\n            actions: {\n              review: {\n                code: 101,\n                title: 'Review',\n                flag: '1',\n              },\n            },\n            flags: {\n              1: {\n                title: 'Reviewing',\n              },\n              2: {\n                title: 'Reviewed',\n              },\n            },\n            validator: 'party',\n            search: {\n              validator: 'partySearch',\n            },\n          },\n        },\n        functions: {\n          createParty: {\n            title: 'Create Party',\n            scene: 'create',\n            autoRight: 1,\n            atomClassName: 'party',\n            action: 'create',\n            sorting: 1,\n            menu: 1,\n          },\n          listParty: {\n            title: 'Party List',\n            scene: 'list',\n            autoRight: 1,\n            atomClassName: 'party',\n            action: 'read',\n            sorting: 1,\n            menu: 1,\n          },\n          kitchenSink: {\n            title: 'Kitchen-sink',\n            scene: 'tools',\n            actionPath: 'kitchen-sink/index',\n            sorting: 1,\n            menu: 1,\n          },\n        },\n      },\n      validation: {\n        validators: {\n          party: {\n            schemas: 'party',\n          },\n          partySearch: {\n            schemas: 'partySearch',\n          },\n          userTest: {\n            schemas: 'settingsUser,settingsUserExtra',\n          },\n          instanceTest: {\n            schemas: 'settingsInstance',\n          },\n          formTest: {\n            schemas: 'formTest',\n          },\n          formCaptchaTest: {\n            schemas: 'formCaptchaTest',\n          },\n        },\n        keywords: {\n          'x-languages': keywords.languages,\n        },\n        schemas: {\n          party: schemas.party,\n          partySearch: schemas.partySearch,\n          settingsUser: schemas.settingsUser,\n          settingsUserExtra: schemas.settingsUserExtra,\n          settingsInstance: schemas.settingsInstance,\n          formTest: schemas.formTest,\n          formCaptchaTest: schemas.formCaptchaTest,\n        },\n      },\n      settings: {\n        user: {\n          validator: 'userTest',\n        },\n        instance: {\n          validator: 'instanceTest',\n        },\n      },\n      index: {\n        indexes: {\n          testParty: 'createdAt,updatedAt,atomId,partyTypeId',\n        },\n      },\n    });\n  }\n  if (app.meta.isTest) {\n    // meta\n    extend(true, meta, {\n      base: {\n        atoms: {\n          partyPublic: {\n            info: {\n              tableName: 'testPartyPublic',\n              public: 1,\n              flow: 1,\n            },\n          },\n        },\n        functions: {\n          testFunctionPublic: {\n            scene: 'tools',\n            menu: 1,\n            public: 1,\n          },\n        },\n      },\n      event: {\n        declarations: {\n          hello: 'This is a test for event',\n        },\n        implementations: {\n          'test-party:hello': 'test/event/helloEcho',\n          'a-base:userVerify': 'test/event/userVerify',\n          'a-base:loginInfo': 'test/event/loginInfo',\n        },\n      },\n      hook: {\n        before: [\n          { path: '/test/party/test/feat/hook/echo', route: 'test/feat/hook/echoBefore' },\n        ],\n        after: [\n          { path: '/test/party/test/feat/hook/echo', route: 'test/feat/hook/echoAfter' },\n        ],\n      },\n      sequence: {\n        providers: {\n          test: {\n            start: 0,\n            expression({ ctx, value }) {\n              return ++value;\n            },\n          },\n        },\n      },\n    });\n  }\n  return meta;\n};\n","module.exports = app => {\n  const schemas = {};\n  // party\n  schemas.party = {\n    type: 'object',\n    properties: {\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Party Name',\n        notEmpty: true,\n      },\n      personCount: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Person Count',\n        notEmpty: true,\n      },\n      partyTypeId: {\n        type: 'number',\n        ebType: 'select',\n        ebTitle: 'Party Type',\n        ebOptionsUrl: '/test/party/party/types',\n        ebOptionTitleKey: 'name',\n        ebOptionValueKey: 'id',\n        ebOptionsBlankAuto: true,\n        notEmpty: true,\n      },\n    },\n  };\n  // party search\n  schemas.partySearch = {\n    type: 'object',\n    properties: {\n      partyTypeId: {\n        type: 'number',\n        ebType: 'select',\n        ebTitle: 'Party Type',\n        ebOptionsUrl: '/test/party/party/types',\n        ebOptionTitleKey: 'name',\n        ebOptionValueKey: 'id',\n        ebOptionsBlankAuto: true,\n      },\n    },\n  };\n\n  // settings\n  schemas.settingsUser = {\n    type: 'object',\n    properties: {\n      groupInfo: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        properties: {\n          username: {\n            type: 'string',\n            ebType: 'text',\n            ebTitle: 'My Name',\n            notEmpty: true,\n          },\n        },\n      },\n      groupExtra: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Extra Group',\n        properties: {\n          panelExtra: {\n            ebType: 'panel',\n            ebTitle: 'Extra',\n            $ref: 'settingsUserExtra',\n          },\n        },\n      },\n    },\n  };\n  schemas.settingsUserExtra = {\n    type: 'object',\n    ebTitle: 'Extra',\n    properties: {\n      groupInfo: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        properties: {\n          mobile: {\n            type: 'string',\n            ebType: 'text',\n            ebTitle: 'Mobile',\n            notEmpty: true,\n          },\n          sex: {\n            type: 'number',\n            ebType: 'select',\n            ebTitle: 'Sex',\n            ebMultiple: false,\n            ebOptions: [\n              { title: 'Male', value: 1 },\n              { title: 'Female', value: 2 },\n            ],\n            ebParams: {\n              openIn: 'page',\n              closeOnSelect: true,\n            },\n            notEmpty: true,\n          },\n          language: {\n            type: 'string',\n            ebType: 'select',\n            ebTitle: 'Language',\n            ebOptionsUrl: '/a/base/base/locales',\n            ebOptionsUrlParams: null,\n            'x-languages': true,\n            notEmpty: true,\n          },\n        },\n      },\n    },\n  };\n  schemas.settingsInstance = {\n    type: 'object',\n    properties: {\n      groupInfo: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        properties: {\n          slogan: {\n            type: 'string',\n            ebType: 'text',\n            ebTitle: 'Slogan',\n            notEmpty: true,\n          },\n        },\n      },\n    },\n  };\n  schemas.formTest = {\n    type: 'object',\n    properties: {\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        notEmpty: true,\n      },\n      password: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Password',\n        ebSecure: true,\n        notEmpty: true,\n        minLength: 6,\n      },\n      passwordAgain: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Password again',\n        ebSecure: true,\n        notEmpty: true,\n        const: { $data: '1/password' },\n      },\n      sex: {\n        type: 'number',\n        ebType: 'select',\n        ebTitle: 'Sex',\n        ebMultiple: false,\n        ebOptions: [\n          { title: 'Male', value: 1 },\n          { title: 'Female', value: 2 },\n        ],\n        ebOptionsBlankAuto: true,\n        ebParams: {\n          openIn: 'page',\n          closeOnSelect: true,\n        },\n        notEmpty: true,\n      },\n      language: {\n        type: 'string',\n        ebType: 'select',\n        ebTitle: 'Language',\n        ebOptionsUrl: '/a/base/base/locales',\n        ebOptionsUrlParams: null,\n        ebOptionsBlankAuto: true,\n        'x-languages': true,\n        notEmpty: true,\n      },\n      avatar: {\n        type: 'string',\n        ebType: 'file',\n        ebTitle: 'Avatar',\n        ebParams: { mode: 1 },\n        notEmpty: true,\n      },\n      rememberMe: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Remember me',\n      },\n    },\n  };\n  schemas.formCaptchaTest = {\n    type: 'object',\n    properties: {\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        notEmpty: true,\n      },\n      password: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Password',\n        ebSecure: true,\n        notEmpty: true,\n        minLength: 6,\n      },\n    },\n  };\n\n  return schemas;\n};\n","const require3 = require('require3');\nconst Ajv = require3('ajv');\n\nmodule.exports = app => {\n  const keywords = {};\n  keywords.languages = {\n    async: true,\n    type: 'string',\n    errors: true,\n    compile(sch, parentSchema) {\n      const func = async function(data) {\n        const ctx = this;\n        const context = arguments.callee.context;\n        const locales = await ctx.performAction({\n          method: 'post',\n          url: context.parentSchema.ebOptionsUrl,\n          body: context.parentSchema.ebOptionsUrlParams,\n        });\n        const index = locales.findIndex(item => item.value === data);\n        if (index > -1) return true;\n        const errors = [{ keyword: 'x-languages', params: [], message: ctx.text('Not expected value') }];\n        throw new Ajv.ValidationError(errors);\n      };\n      func.context = {\n        sch, parentSchema,\n      };\n      return func;\n    },\n  };\n  return keywords;\n};\n"],"sourceRoot":""}