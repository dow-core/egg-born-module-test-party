{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/external \"require3\"","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/config/middleware/interception.js","webpack://backend/./backend/src/config/middleware/restructuring.js","webpack://backend/./backend/src/config/middleware/injection.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/party.js","webpack://backend/./backend/src/controller/partyPublic.js","webpack://backend/./backend/src/controller/test/atom/starLabel.js","webpack://backend/./backend/src/controller/test/atom/all.js","webpack://backend/./backend/src/controller/test/atom/publicFlow.js","webpack://backend/./backend/src/controller/test/atom/right.js","webpack://backend/./backend/src/controller/test/function/right.js","webpack://backend/./backend/src/controller/test/function/all.js","webpack://backend/./backend/src/controller/test/function/public.js","webpack://backend/./backend/src/controller/test/ctx/performAction.js","webpack://backend/./backend/src/controller/test/ctx/transaction.js","webpack://backend/./backend/src/controller/test/ctx/tail.js","webpack://backend/./backend/src/controller/test/ctx/session.js","webpack://backend/./backend/src/controller/test/ctx/request.js","webpack://backend/./backend/src/controller/test/ctx/response.js","webpack://backend/./backend/src/controller/test/ctx/config.js","webpack://backend/./backend/src/controller/test/ctx/locale.js","webpack://backend/./backend/src/controller/test/cache/mem.js","webpack://backend/./backend/src/controller/test/cache/db.js","webpack://backend/./backend/src/controller/test/role/userRole.js","webpack://backend/./backend/src/controller/test/event/hello.js","webpack://backend/./backend/src/controller/test/event/userVerify.js","webpack://backend/./backend/src/controller/test/feat/httpLog.js","webpack://backend/./backend/src/controller/test/feat/startup.js","webpack://backend/./backend/src/controller/test/feat/sendMail.js","webpack://backend/./backend/src/controller/test/feat/hook.js","webpack://backend/./backend/src/controller/test/feat/instance.js","webpack://backend/./backend/src/controller/test/feat/progress.js","webpack://backend/./backend/src/controller/test/feat/sequence.js","webpack://backend/./backend/src/controller/test/feat/settings.js","webpack://backend/./backend/src/controller/test/feat/status.js","webpack://backend/./backend/src/controller/test/feat/validation.js","webpack://backend/./backend/src/controller/test/feat/middleware.js","webpack://backend/./backend/src/controller/test/feat/queue.js","webpack://backend/./backend/src/controller/test/feat/broadcast.js","webpack://backend/./backend/src/controller/kitchen-sink/autocomplete.js","webpack://backend/./backend/src/controller/kitchen-sink/guide.js","webpack://backend/./backend/src/controller/kitchen-sink/form-schema-validation.js","webpack://backend/./backend/src/controller/kitchen-sink/ptr-is-loadmore.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/version/test.js","webpack://backend/./backend/src/service/version/testData.js","webpack://backend/./backend/src/service/party.js","webpack://backend/./backend/src/service/partyPublic.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/model/party.js","webpack://backend/./backend/src/model/partyType.js","webpack://backend/./backend/src/model/partyPublic.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/config/validation/schemas.js","webpack://backend/./backend/src/config/validation/keywords.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","config","locales","errors","middlewares","app","routes","services","models","meta","appInfo","env","startups","startupAll","type","path","startupInstance","instance","testInterception","global","dependencies","testRestructuring","testInjection","queues","queueTest","broadcasts","broadcastTest","message","settings","groupInfo","slogan","user","username","groupExtra","panelExtra","mobile","sex","language","Party","Review","Reviewing","Reviewed","Birthday","Dance","Garden","Item","1001","1002","interception","restructuring","injection","ctx","next","a","b","request","body","undefined","throw","parseInt","__plus","version","party","partyPublic","testAtomStarLabel","testAtomAll","testAtomPublicFlow","testAtomRight","testFunctionRight","testFunctionAll","testFunctionPublic","testCtxPerformAction","testCtxTransaction","testCtxTail","testCtxSession","testCtxRequest","testCtxResponse","testCtxConfig","testCtxLocale","testCacheMem","testCacheDb","testRoleUserRole","testEventHello","testEventUserVerify","testFeatHttpLog","testFeatStartup","testFeatSendMail","testFeatHook","testFeatInstance","testFeatProgress","testFeatSequence","testFeatSettings","testFeatStatus","testFeatValidation","testFeatMiddleware","testFeatQueue","testFeatBroadcast","testKitchensinkAutocomplete","testKitchensinkGuide","testKitchensinkFormSchemaValidation","testKitchensinkPtrIsLoadMore","method","controller","isTest","isLocal","concat","auth","enable","right","action","validate","validator","schema","VersionController","Controller","update","service","success","init","test","PartyController","res","read","select","write","delete","types","PartyPublicController","assert","require3","StarLabelController","starLabel","atomClass","atomClassName","op","partyKey","atom","item","atomName","equal","star","labels","parties","options","where","length","label","AllController","all","userIds","cache","mem","_testCheckList","actual","expected","userName","id","Tom","personCount","atomEnabled","val","orders","page","index","size","atomId","checkRightRead","checkRightUpdate","constant","checkRightCreate","checkRightAction","Jane","userAtoms","cb","atomCountExpected","list","PublicFlowController","publicFlow","checkRightReads","flow","atomFlow","RightController","_atomClass","_atom","checkRightWrite","checkRightFunctionUser","_function","userTom","function","locale","titleLocale","function1","clearLocales","check","functions","passed","PublicController","functionPublic","pass","checkRightFunction","model","query","PerformActionController","performAction","url","echo","TransactionController","transaction","atomKey","itemNew","TailController","tail","_cache","SessionController","session","_key1","_key2","echo1","echo2","RequestController","params","getInt","age","getStr","requestXML","payload","getPayload","status","toString","ResponseController","successMore","fail","throwError","ConfigController","LocaleController","enus","data","text","zhcn","MemController","set","has","ms","remove","info","relativeName","Promise","resolve","setTimeout","DbController","db","moduleCache","UserRoleController","userRole","roleIds","role","getUserRolesDirect","userId","root","getUserRolesParent","getUserRolesExpand","userInRoleDirect","roleId","superuser","userInRoleParent","userInRoleExpand","system","moduleInfo","mockUtil","parseInfoFromPackage","__dirname","HelloController","hello","event","invoke","helloEcho","break","extend","UserVerifyController","userVerify","profileUser","profileId","loginInfo","provider","providerName","layout","login","loginOnStart","toolbar","tabbar","bottomMd","tabs","tabLinkActive","iconMaterial","HttpLogController","httpLog","StartupController","console","log","SendMailController","sendMail","mail","send","scene","to","subject","HookController","echoBefore","ctxCaller","echoAfter","InstanceController","ProgressController","progress","progressId","performActionInBackground","progressInBackground","_levelOne","progressNo","done","err","error","current","total","util","sleep","_levelTwo","_levelThree","pMap","SequenceController","sequence","reset","moduleSequence","results","join","SettingsController","getUser","loadSettingsUser","saveSettingsUser","getInstance","loadSettingsInstance","saveSettingsInstance","StatusController","moduleStatus","ValidationController","TestController","QueueController","queue","pushAsync","subdomain","queueName","push","BroadcastController","broadcast","sameAsCaller","emit","broadcastName","languages","AutocompleteController","filter","toLowerCase","indexOf","GuideController","echo3","echo4","markCount","Array","echo6","insert","iid","deleted","insertId","echo7","echo8","personCountA","echo9","FormSchemaValidationController","load","cacheName","_getCacheName","password","passwordAgain","avatar","rememberMe","saveSimple","saveValidation","signup","this","PtrIsLoadMoreController","items","itemId","title","assign","VersionTestFn","Version","Service","sql","partyType","roleFunctions","roleName","addRoleFunctionBatch","roleRights","scopeNames","addRoleRightBatch","versionTest","run","testData","_testRoles","_testRoleIncs","setDirty","_testUsers","_testRoleRights","_testCache","systemRoles","getSystemRole","roles","leader","catalog","roleNameParent","add","roleIdParent","roleIncs","roleIdInc","addRoleInc","users","realName","save","activated","addUserRole","_testAuths","userRoot","gPartyTypeEmojis","_getMeta","flags","summary","partyTypeName","_meta","partyTypeId","flag","atomFlag","empty","map","PartyPublic","Model","constructor","super","table","disableDeleted","PartyType","schemas","keywords","base","atoms","tableName","actions","review","code","1","2","search","createParty","autoRight","sorting","menu","listParty","kitchenSink","actionPath","validation","validators","partySearch","userTest","instanceTest","formTest","formCaptchaTest","settingsUser","settingsUserExtra","settingsInstance","indexes","testParty","public","declarations","implementations","hook","before","route","after","providers","start","expression","properties","ebType","ebTitle","notEmpty","ebOptionsUrl","ebOptionTitleKey","ebOptionValueKey","ebOptionsBlankAuto","$ref","ebMultiple","ebOptions","ebParams","openIn","closeOnSelect","ebOptionsUrlParams","ebSecure","minLength","const","$data","async","compile","sch","parentSchema","findIndex","keyword","ajv","ValidationError"],"mappings":"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","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"require3\");","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\n\nmodule.exports = app => {\n\n  // routes\n  const routes = require('./routes.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    meta,\n  };\n\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  if (appInfo.env === 'unittest') {\n    // startups\n    config.startups = {\n      startupAll: {\n        type: 'worker',\n        path: 'test/feat/startup/all',\n      },\n      startupInstance: {\n        type: 'worker',\n        instance: true,\n        path: 'test/feat/startup/instance',\n      },\n    };\n    // middlewares\n    config.middlewares = {\n      testInterception: {\n        global: false,\n        dependencies: 'instance',\n      },\n      testRestructuring: {\n        global: false,\n        dependencies: 'instance',\n      },\n      testInjection: {\n        global: false,\n        dependencies: 'instance',\n      },\n    };\n    // queues\n    config.queues = {\n      queueTest: {\n        path: 'test/feat/queue',\n      },\n    };\n    // broadcasts\n    config.broadcasts = {\n      broadcastTest: {\n        path: 'test/feat/broadcast',\n      },\n    };\n  }\n\n  if (appInfo.env === 'unittest' || appInfo.env === 'local') {\n\n    // config\n    config.message = 'Hello World';\n\n    // settings\n    config.settings = {\n      instance: {\n        groupInfo: {\n          slogan: '',\n        },\n      },\n      user: {\n        groupInfo: {\n          username: 'zhennann',\n        },\n        groupExtra: {\n          panelExtra: {\n            groupInfo: {\n              mobile: '123',\n              sex: 1,\n              language: 'en-us',\n            },\n          },\n        },\n      },\n    };\n  }\n\n\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  Party: '宴会',\n  Review: '评审',\n  Reviewing: '评审中',\n  Reviewed: '已评审',\n  Birthday: '生日',\n  Dance: '跳舞',\n  Garden: '花园',\n  Item: '条目',\n  'Create Party': '新建宴会',\n  'Party List': '宴会列表',\n  'Level One': '层级1',\n  'Level Two': '层级2',\n  'Level Three': '层级3',\n  'Well Done': '干得好',\n  'Error Test': '错误测试',\n  'Hello World': '世界，您好',\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Error Test',\n  1002: 'Incomplete Parameters',\n};\n","const interception = require('./middleware/interception.js');\nconst restructuring = require('./middleware/restructuring.js');\nconst injection = require('./middleware/injection.js');\n\nmodule.exports = {\n  testInterception: interception,\n  testRestructuring: restructuring,\n  testInjection: injection,\n};\n","module.exports = () => {\n  return async function interception(ctx, next) {\n\n    const { a, b } = ctx.request.body;\n    if (a === undefined || b === undefined) return ctx.throw(1002); // 1002: 'Incomplete Parameters'\n\n    // next\n    await next();\n  };\n};\n","module.exports = () => {\n  return async function restructuring(ctx, next) {\n\n    const { a, b } = ctx.request.body;\n    ctx.request.body.a = parseInt(a);\n    ctx.request.body.b = parseInt(b);\n\n    // next\n    await next();\n  };\n};\n","module.exports = () => {\n  return async function injection(ctx, next) {\n\n    ctx.meta.__plus = (a, b) => {\n      return a + b;\n    };\n\n    // next\n    await next();\n  };\n};\n","const version = require('./controller/version.js');\nconst party = require('./controller/party.js');\nconst partyPublic = require('./controller/partyPublic.js');\nconst testAtomStarLabel = require('./controller/test/atom/starLabel.js');\nconst testAtomAll = require('./controller/test/atom/all.js');\nconst testAtomPublicFlow = require('./controller/test/atom/publicFlow.js');\nconst testAtomRight = require('./controller/test/atom/right.js');\nconst testFunctionRight = require('./controller/test/function/right.js');\nconst testFunctionAll = require('./controller/test/function/all.js');\nconst testFunctionPublic = require('./controller/test/function/public.js');\nconst testCtxPerformAction = require('./controller/test/ctx/performAction.js');\nconst testCtxTransaction = require('./controller/test/ctx/transaction.js');\nconst testCtxTail = require('./controller/test/ctx/tail.js');\nconst testCtxSession = require('./controller/test/ctx/session.js');\nconst testCtxRequest = require('./controller/test/ctx/request.js');\nconst testCtxResponse = require('./controller/test/ctx/response.js');\nconst testCtxConfig = require('./controller/test/ctx/config.js');\nconst testCtxLocale = require('./controller/test/ctx/locale.js');\nconst testCacheMem = require('./controller/test/cache/mem.js');\nconst testCacheDb = require('./controller/test/cache/db.js');\nconst testRoleUserRole = require('./controller/test/role/userRole.js');\nconst testEventHello = require('./controller/test/event/hello.js');\nconst testEventUserVerify = require('./controller/test/event/userVerify.js');\nconst testFeatHttpLog = require('./controller/test/feat/httpLog.js');\nconst testFeatStartup = require('./controller/test/feat/startup.js');\nconst testFeatSendMail = require('./controller/test/feat/sendMail.js');\nconst testFeatHook = require('./controller/test/feat/hook.js');\nconst testFeatInstance = require('./controller/test/feat/instance.js');\nconst testFeatProgress = require('./controller/test/feat/progress.js');\nconst testFeatSequence = require('./controller/test/feat/sequence.js');\nconst testFeatSettings = require('./controller/test/feat/settings.js');\nconst testFeatStatus = require('./controller/test/feat/status.js');\nconst testFeatValidation = require('./controller/test/feat/validation.js');\nconst testFeatMiddleware = require('./controller/test/feat/middleware.js');\nconst testFeatQueue = require('./controller/test/feat/queue.js');\nconst testFeatBroadcast = require('./controller/test/feat/broadcast.js');\nconst testKitchensinkAutocomplete = require('./controller/kitchen-sink/autocomplete.js');\nconst testKitchensinkGuide = require('./controller/kitchen-sink/guide.js');\nconst testKitchensinkFormSchemaValidation = require('./controller/kitchen-sink/form-schema-validation.js');\nconst testKitchensinkPtrIsLoadMore = require('./controller/kitchen-sink/ptr-is-loadmore.js');\n\nmodule.exports = app => {\n  let routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/test', controller: version, middlewares: 'test' },\n  ];\n  if (app.meta.isTest || app.meta.isLocal) {\n    routes = routes.concat([\n      // atom: party\n      { method: 'post', path: 'party/create', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/read', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/select', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/write', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/delete', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/action', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/enable', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/types', controller: party },\n\n      // atom: partyPublic (only for test)\n      { method: 'post', path: 'partyPublic/create', controller: partyPublic, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/read', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/select', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/write', controller: partyPublic, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/delete', controller: partyPublic, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/action', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/enable', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n\n      // test/atom/starLabel\n      { method: 'post', path: 'test/atom/starLabel', controller: testAtomStarLabel, middlewares: 'test' },\n      // test/atom/all\n      { method: 'post', path: 'test/atom/all', controller: testAtomAll, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/atom/publicFlow\n      { method: 'post', path: 'test/atom/publicFlow', controller: testAtomPublicFlow, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/atom/right(checked by middleware)\n      { method: 'post', path: 'test/atom/checkRightCreate', controller: testAtomRight, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 1 } },\n      },\n      { method: 'post', path: 'test/atom/checkRightRead', controller: testAtomRight, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 2 } },\n      },\n      { method: 'post', path: 'test/atom/checkRightWrite', controller: testAtomRight, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 3 } },\n      },\n      { method: 'post', path: 'test/atom/checkRightAction', controller: testAtomRight, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 101 } },\n      },\n\n      // test/function/right\n      { method: 'post', path: 'test/function/checkRightFunctionUser', controller: testFunctionRight, middlewares: 'test',\n        meta: { right: { type: 'function', module: 'a-baseadmin', name: 'user' } },\n      },\n      // test/function/all\n      { method: 'post', path: 'test/function/all', controller: testFunctionAll, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/function/public\n      { method: 'post', path: 'test/function/functionPublic', controller: testFunctionPublic, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/role/userRole\n      { method: 'post', path: 'test/role/userRole', controller: testRoleUserRole, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/ctx/performAction\n      { method: 'post', path: 'test/ctx/performAction', controller: testCtxPerformAction, middlewares: 'test' },\n      { method: 'post', path: 'test/ctx/performAction/echo', controller: testCtxPerformAction, middlewares: 'test' },\n      // test/ctx/transaction\n      { method: 'post', path: 'test/ctx/transaction', controller: testCtxTransaction, middlewares: 'test,transaction' },\n      // test/ctx/tail\n      { method: 'post', path: 'test/ctx/tail', controller: testCtxTail, middlewares: 'test' },\n      // test/ctx/session\n      { method: 'post', path: 'test/ctx/session', controller: testCtxSession, middlewares: 'test' },\n      { method: 'post', path: 'test/ctx/session/echo1', controller: testCtxSession, middlewares: 'test' },\n      { method: 'post', path: 'test/ctx/session/echo2', controller: testCtxSession, middlewares: 'test' },\n      // test/ctx/request\n      { method: 'post', path: 'test/ctx/request/:id', controller: testCtxRequest, action: 'request', middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/requestXML', controller: testCtxRequest, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/ctx/response\n      { method: 'post', path: 'test/ctx/response/success', controller: testCtxResponse, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/response/successMore', controller: testCtxResponse, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/response/fail', controller: testCtxResponse, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/response/throwError', controller: testCtxResponse, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/ctx/config\n      { method: 'post', path: 'test/ctx/config/test', controller: testCtxConfig, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/ctx/locale\n      { method: 'post', path: 'test/ctx/locale/enus', controller: testCtxLocale, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/ctx/locale/zhcn', controller: testCtxLocale, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/event/hello\n      { method: 'post', path: 'test/event/hello', controller: testEventHello, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/event/helloEcho', controller: testEventHello, middlewares: 'test,inner', meta: { auth: { enable: false } } },\n      // test/event/userVerify\n      { method: 'post', path: 'test/event/userVerify', controller: testEventUserVerify, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/event/loginInfo', controller: testEventUserVerify, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/cache\n      { method: 'post', path: 'test/cache/mem', controller: testCacheMem, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/cache/db', controller: testCacheDb, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/httpLog\n      { method: 'post', path: 'test/feat/httpLog', controller: testFeatHttpLog, middlewares: 'test,httpLog', meta: { auth: { enable: false } } },\n\n      // test/feat/startup\n      { method: 'post', path: 'test/feat/startup/all', controller: testFeatStartup, middlewares: 'inner', meta: { instance: { enable: false } } },\n      { method: 'post', path: 'test/feat/startup/instance', controller: testFeatStartup, middlewares: 'inner', meta: { auth: { enable: false } } },\n\n      // test/feat/sendMail\n      { method: 'post', path: 'test/feat/sendMail', controller: testFeatSendMail, middlewares: 'test,mail', meta: { auth: { enable: false } } },\n\n      // test/feat/hook\n      { method: 'post', path: 'test/feat/hook/echo', controller: testFeatHook, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/feat/hook/echoBefore', controller: testFeatHook, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/feat/hook/echoAfter', controller: testFeatHook, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/hook\n      { method: 'post', path: 'test/feat/instance', controller: testFeatInstance, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/progress\n      { method: 'post', path: 'test/feat/progress', controller: testFeatProgress, middlewares: 'progress', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/feat/progressInBackground', controller: testFeatProgress, middlewares: 'inner,progress', meta: { auth: { enable: false } } },\n\n      // test/feat/sequence\n      { method: 'post', path: 'test/feat/sequence', controller: testFeatSequence, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/settings\n      { method: 'post', path: 'test/feat/settings', controller: testFeatSettings, middlewares: 'test' },\n\n      // test/feat/status\n      { method: 'post', path: 'test/feat/status', controller: testFeatStatus, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/validation\n      { method: 'post', path: 'test/feat/validation/success', controller: testFeatValidation, middlewares: 'test,validate',\n        meta: { auth: { enable: false }, validate: { validator: 'userTest' } },\n      },\n      { method: 'post', path: 'test/feat/validation/fail', controller: testFeatValidation, middlewares: 'test,validate',\n        meta: { auth: { enable: false }, validate: { validator: 'userTest' } },\n      },\n      { method: 'post', path: 'test/feat/validation/schema', controller: testFeatValidation, middlewares: 'test,validate',\n        meta: { auth: { enable: false }, validate: { validator: 'userTest', schema: 'settingsUserExtra' } },\n      },\n\n      // test/feat/middleware\n      { method: 'post', path: 'test/feat/middleware/interception', controller: testFeatMiddleware, middlewares: 'test,testInterception' },\n      { method: 'post', path: 'test/feat/middleware/restructuring', controller: testFeatMiddleware, middlewares: 'test,testInterception,testRestructuring' },\n      { method: 'post', path: 'test/feat/middleware/injection', controller: testFeatMiddleware, middlewares: 'test,testInterception,testRestructuring,testInjection' },\n\n      // test/feat/queue\n      { method: 'post', path: 'test/feat/queue', controller: testFeatQueue, middlewares: 'inner' },\n      { method: 'post', path: 'test/feat/pushAsync', controller: testFeatQueue, middlewares: 'test' },\n      { method: 'post', path: 'test/feat/push', controller: testFeatQueue, middlewares: 'test' },\n\n      // test/feat/broadcast\n      { method: 'post', path: 'test/feat/broadcast', controller: testFeatBroadcast, middlewares: 'inner' },\n      { method: 'post', path: 'test/feat/broadcast/emit', controller: testFeatBroadcast, middlewares: 'test' },\n\n      // kitchen-sink/guide\n      { method: 'post', path: 'kitchen-sink/guide/echo', controller: testKitchensinkGuide },\n      { method: 'post', path: 'kitchen-sink/guide/echo3', controller: testKitchensinkGuide },\n      { method: 'post', path: 'kitchen-sink/guide/echo4', controller: testKitchensinkGuide },\n      { method: 'post', path: 'kitchen-sink/guide/echo6', controller: testKitchensinkGuide },\n      { method: 'post', path: 'kitchen-sink/guide/echo7', controller: testKitchensinkGuide },\n      { method: 'post', path: 'kitchen-sink/guide/echo8', controller: testKitchensinkGuide, middlewares: 'transaction' },\n      { method: 'post', path: 'kitchen-sink/guide/echo9', controller: testKitchensinkGuide,\n        meta: {\n          right: { type: 'function', name: 'kitchenSink' },\n        },\n      },\n\n      // kitchen-sink/autocomplete\n      { method: 'get', path: 'kitchen-sink/autocomplete/languages/:query', controller: testKitchensinkAutocomplete, action: 'languages', meta: { auth: { enable: false } } },\n      // kitchen-sink/form-schema-validation\n      { method: 'get', path: 'kitchen-sink/form-schema-validation/load', controller: testKitchensinkFormSchemaValidation },\n      { method: 'post', path: 'kitchen-sink/form-schema-validation/saveSimple', controller: testKitchensinkFormSchemaValidation },\n      { method: 'post', path: 'kitchen-sink/form-schema-validation/saveValidation', controller: testKitchensinkFormSchemaValidation, middlewares: 'validate',\n        meta: { validate: { validator: 'formTest' } },\n      },\n      { method: 'post', path: 'kitchen-sink/form-captcha/signup', controller: testKitchensinkFormSchemaValidation, middlewares: 'validate,captchaVerify',\n        meta: { validate: { validator: 'formCaptchaTest' } },\n      },\n      // kitchen-sink/ptr-is-loadmore\n      { method: 'post', path: 'kitchen-sink/ptr-is-loadmore/list', controller: testKitchensinkPtrIsLoadMore },\n\n    ]);\n  }\n  return routes;\n};\n","module.exports = app => {\n\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async test() {\n      await this.service.version.test(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n\n  return VersionController;\n};\n","module.exports = app => {\n\n  class PartyController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.party.create(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async read() {\n      const res = await this.ctx.service.party.read(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async select() {\n      const res = await this.ctx.service.party.select(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async write() {\n      await this.ctx.service.party.write(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.party.delete(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async action() {\n      const res = await this.ctx.service.party.action(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async enable() {\n      const res = await this.ctx.service.party.enable(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async types() {\n      const res = await this.ctx.service.party.types(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n  }\n\n  return PartyController;\n};\n\n","module.exports = app => {\n\n  class PartyPublicController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.partyPublic.create(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async read() {\n      const res = await this.ctx.service.party.read(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async select() {\n      const res = await this.ctx.service.party.select(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async write() {\n      await this.ctx.service.partyPublic.write(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.partyPublic.delete(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async action() {\n      const res = await this.ctx.service.party.action(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async enable() {\n      const res = await this.ctx.service.party.enable(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n  }\n\n  return PartyPublicController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class StarLabelController extends app.Controller {\n\n    async starLabel() {\n      // atomClass\n      const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'party' });\n      // user\n      const user = this.ctx.user.op;\n\n      // add party:star\n      const partyKey = await this.ctx.meta.atom.create({\n        atomClass,\n        user,\n      });\n\n      // write party\n      await this.ctx.meta.atom.write({\n        key: partyKey,\n        item: { atomName: 'test:starLabel' },\n        user,\n      });\n\n      // get party\n      let party = await this.ctx.meta.atom.read({ key: partyKey, user });\n      assert.equal(party.star, null);\n      assert.equal(party.labels, null);\n\n      // set star/label\n      await this.ctx.meta.atom.star({ key: partyKey, atom: { star: 1 }, user });\n      await this.ctx.meta.atom.labels({ key: partyKey, atom: { labels: [ 1 ] }, user });\n\n      // get party\n      party = await this.ctx.meta.atom.read({ key: partyKey, user });\n      assert.equal(party.star, 1);\n      assert.equal(party.labels, '[1]');\n\n      // select parties\n      let parties = await this.ctx.meta.atom.select({\n        user,\n        options: {\n          star: 1,\n          where: { atomName: 'test:starLabel' },\n        },\n      });\n      assert.equal(parties.length, 1);\n\n      parties = await this.ctx.meta.atom.select({\n        user,\n        options: {\n          label: 1,\n          where: { atomName: 'test:starLabel' },\n        },\n      });\n      assert.equal(parties.length, 1);\n\n      parties = await this.ctx.meta.atom.select({\n        user,\n        options: {\n          label: 2,\n          where: { atomName: 'test:starLabel' },\n        },\n      });\n      assert.equal(parties.length, 0);\n\n      // clear star/label\n      await this.ctx.meta.atom.star({ key: partyKey, atom: { star: 0 }, user });\n      await this.ctx.meta.atom.labels({ key: partyKey, atom: { labels: null }, user });\n\n      // get party\n      party = await this.ctx.meta.atom.read({ key: partyKey, user });\n      assert.equal(party.star, null);\n      assert.equal(party.labels, null);\n\n      // delete party\n      await this.ctx.meta.atom.delete({ key: partyKey, user });\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return StarLabelController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class AllController extends app.Controller {\n\n    async all() {\n      // atomClass\n      const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'party' });\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n\n      // user->atom\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n        [ '', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom add party\n      const partyKey = await this.ctx.meta.atom.create({\n        atomClass,\n        user: { id: userIds.Tom },\n      });\n      await this.ctx.meta.atom.write({\n        key: partyKey,\n        item: { atomName: 'test:all', personCount: 3 },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n        [ '', 1 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom enable(submit) party\n      await this.ctx.meta.atom.enable({\n        key: partyKey,\n        atom: {\n          atomEnabled: 1,\n        },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 1 ],\n        [ 'Jimmy', 1 ],\n        [ 'Smith', 1 ],\n        [ '', 1 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom update party\n      await this.ctx.meta.atom.write({\n        key: partyKey,\n        item: { personCount: 8 },\n        user: { id: userIds.Tom },\n      });\n\n      // Tom get party\n      const party = await this.ctx.meta.atom.read({ key: partyKey, user: { id: userIds.Tom } });\n      assert.equal(party.personCount, 8);\n\n      // Tom list party\n      const parties = await this.ctx.meta.atom.select({\n        atomClass,\n        options: {\n          where: { atomName: { val: 'test:all', op: 'likeRight' } },\n          orders: [[ 'a.createdAt', 'desc' ]],\n          page: { index: 0, size: 0 },\n        },\n        user: { id: userIds.Tom },\n      });\n      assert.equal(parties.length, 1);\n\n      // checkRightRead\n      const checkRightReads = [[ 'Tom', partyKey.atomId, true ]];\n      for (const [ userName, atomId, right ] of checkRightReads) {\n        const res = await this.ctx.meta.atom.checkRightRead({\n          atom: { id: atomId },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightWrite\n      const checkRightWrites = [[ 'Tom', partyKey.atomId, true ], [ 'Tomson', partyKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightWrites) {\n        const res = await this.ctx.meta.atom.checkRightUpdate({\n          atom: { id: atomId, action: this.ctx.constant.module('a-base').atom.action.write },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightDelete\n      const checkRightDeletes = [[ 'Tom', partyKey.atomId, true ], [ 'Tomson', partyKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightDeletes) {\n        const res = await this.ctx.meta.atom.checkRightUpdate({\n          atom: { id: atomId, action: this.ctx.constant.module('a-base').atom.action.delete },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightCreate\n      const checkRightCreates = [[ 'Tom', true ], [ 'Jimmy', true ], [ 'Smith', false ]];\n      for (const [ userName, right ] of checkRightCreates) {\n        const res = await this.ctx.meta.atom.checkRightCreate({\n          atomClass,\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightAction:review(flag=1)\n      const checkRightActions_1 = [[ 'Tom', partyKey.atomId, false ], [ 'Jane', partyKey.atomId, true ]];\n      for (const [ userName, atomId, right ] of checkRightActions_1) {\n        const res = await this.ctx.meta.atom.checkRightAction({\n          atom: { id: atomId, action: 101 },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // action: review\n      await this.ctx.meta.atom.action({\n        action: 101,\n        key: partyKey,\n        user: { id: userIds.Jane },\n      });\n\n      // checkRightAction:review(flag=2)\n      const checkRightActions_2 = [[ 'Tom', partyKey.atomId, false ], [ 'Jane', partyKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightActions_2) {\n        const res = await this.ctx.meta.atom.checkRightAction({\n          atom: { id: atomId, action: 101 },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // action: review again\n      await this.ctx.meta.atom.action({\n        action: 101,\n        key: partyKey,\n        user: { id: userIds.Jane },\n      });\n\n      // Tom delete party\n      await this.ctx.meta.atom.delete({\n        key: partyKey,\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n        [ '', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // done\n      this.ctx.success();\n    }\n\n    async _testCheckList(userIds, userAtoms, cb) {\n      for (const [ userName, atomCountExpected ] of userAtoms) {\n        const list = await this.ctx.meta.atom.select({\n          options: {\n            where: {\n              atomName: 'test:all',\n              'b.module': 'test-party',\n            },\n            orders: null,\n            page: null,\n          },\n          user: userName ? { id: userIds[userName] } : null,\n        });\n        // callback\n        cb(list.length, atomCountExpected, userName);\n      }\n    }\n\n  }\n\n  return AllController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class PublicFlowController extends app.Controller {\n\n    async publicFlow() {\n      // atomClass\n      const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'partyPublic' });\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n\n      // user->atom\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom add party\n      const partyKey = await this.ctx.meta.atom.create({\n        atomClass,\n        user: { id: userIds.Tom },\n      });\n      await this.ctx.meta.atom.write({\n        key: partyKey,\n        item: { atomName: 'test:publicFlow' },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom enable(submit) party\n      await this.ctx.meta.atom.enable({\n        key: partyKey,\n        atom: {\n          atomEnabled: 1,\n        },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // checkRightRead 1\n      let checkRightReads = [[ 'Jane', partyKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightReads) {\n        const res = await this.ctx.meta.atom.checkRightRead({\n          atom: { id: atomId },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // close atomFlow\n      await this.ctx.meta.atom.flow({\n        key: partyKey,\n        atom: {\n          atomFlow: 0,\n        },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 1 ],\n        [ 'Jimmy', 1 ],\n        [ 'Smith', 1 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // checkRightRead 2\n      checkRightReads = [[ 'Jane', partyKey.atomId, true ]];\n      for (const [ userName, atomId, right ] of checkRightReads) {\n        const res = await this.ctx.meta.atom.checkRightRead({\n          atom: { id: atomId },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // Jane read party\n      const party = await this.ctx.meta.atom.read({ key: partyKey, user: { id: userIds.Jane } });\n      assert(party);\n\n      // Tom delete party\n      await this.ctx.meta.atom.delete({\n        key: partyKey,\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // done\n      this.ctx.success();\n    }\n\n    async _testCheckList(userIds, userAtoms, cb) {\n      for (const [ userName, atomCountExpected ] of userAtoms) {\n        const list = await this.ctx.meta.atom.select({\n          options: {\n            where: {\n              atomName: 'test:publicFlow',\n              'b.module': 'test-party',\n            },\n            orders: null,\n            page: null,\n          },\n          user: { id: userIds[userName] },\n        });\n        // callback\n        cb(list.length, atomCountExpected, userName);\n      }\n    }\n\n  }\n\n  return PublicFlowController;\n};\n\n","module.exports = app => {\n\n  class RightController extends app.Controller {\n\n    async checkRightCreate() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atomClass);\n    }\n\n    async checkRightRead() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atom);\n    }\n\n    async checkRightWrite() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atom);\n    }\n\n    async checkRightAction() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atom);\n    }\n\n  }\n\n  return RightController;\n};\n\n","module.exports = app => {\n\n  class RightController extends app.Controller {\n\n    async checkRightFunctionUser() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._function);\n    }\n\n  }\n\n  return RightController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nconst functionCount = 3;\n\nmodule.exports = app => {\n\n  class AllController extends app.Controller {\n\n    async all() {\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      const userTom = { id: userIds.Tom };\n\n      // Tom list all\n      let list = await this.ctx.meta.function.list({\n        options: {\n          where: { 'a.module': 'test-party' },\n          orders: [[ 'id', 'asc' ]],\n          page: { index: 0, size: 0 },\n          locale: '',\n        },\n        user: userTom,\n      });\n      assert.equal(list.length, functionCount);\n      assert(!list[0].titleLocale);\n\n      // Tom menu list zh-cn\n      list = await this.ctx.meta.function.list({\n        options: {\n          where: { 'a.module': 'test-party' },\n          orders: [[ 'id', 'asc' ]],\n          page: { index: 0, size: 0 },\n          locale: 'zh-cn',\n        },\n        user: userTom,\n      });\n      assert.equal(list.length, functionCount);\n      assert.equal(!!list[0].titleLocale, true);\n\n      // hold first\n      const function1 = list[0];\n\n      // clear locales\n      await this.ctx.meta.function.clearLocales();\n\n      // select star\n      list = await this.ctx.meta.function.list({\n        user: userTom,\n        options: {\n          where: { 'a.module': 'test-party' },\n          star: 1,\n          page: { index: 0, size: 0 },\n        },\n      });\n      assert.equal(list.length, 0);\n\n      // star 1\n      await this.ctx.meta.function.star({\n        id: function1.id,\n        star: 1,\n        user: userTom,\n      });\n      list = await this.ctx.meta.function.list({\n        user: userTom,\n        options: {\n          where: { 'a.module': 'test-party' },\n          star: 1,\n          page: { index: 0, size: 0 },\n        },\n      });\n      assert.equal(list.length, 1);\n\n      // star 0\n      await this.ctx.meta.function.star({\n        id: function1.id,\n        star: 0,\n        user: userTom,\n      });\n      list = await this.ctx.meta.function.list({\n        user: userTom,\n        options: {\n          where: { 'a.module': 'test-party' },\n          star: 1,\n          page: { index: 0, size: 0 },\n        },\n      });\n      assert.equal(list.length, 0);\n\n      // check\n      list = await this.ctx.meta.function.check({\n        functions: [\n          { module: function1.module, name: function1.name },\n        ],\n        user: userTom,\n      });\n      assert.equal(list[0].passed, true);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return AllController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class PublicController extends app.Controller {\n\n    async functionPublic() {\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      const userTom = { id: userIds.Tom };\n\n      // check right function\n      const pass = await this.ctx.meta.function.checkRightFunction({\n        function: {\n          module: 'test-party',\n          name: 'testFunctionPublic',\n        },\n        user: userTom,\n      });\n      assert.equal(!!pass, true);\n\n      // Tom list all\n      const list = await this.ctx.meta.function.list({\n        options: {\n          where: {\n            'a.module': 'test-party',\n            'a.public': 1,\n          },\n          orders: [[ 'id', 'asc' ]],\n          page: { index: 0, size: 0 },\n          locale: '',\n        },\n        user: userTom,\n      });\n      assert.equal(list.length, 1);\n\n      // delete function\n      await this.ctx.model.query('delete from aFunction where id=?', [ list[0].id ]);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return PublicController;\n};\n\n","module.exports = app => {\n\n  class PerformActionController extends app.Controller {\n\n    async performAction() {\n      // param: id\n      const id = this.ctx.request.body.id;\n      // performAction\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'test/ctx/performAction/echo',\n        body: {\n          id,\n        },\n      });\n      this.ctx.success(res);\n    }\n\n    async echo() {\n      // body: id\n      const id = this.ctx.request.body.id;\n      // echo back\n      this.ctx.success(id);\n    }\n\n  }\n\n  return PerformActionController;\n};\n\n","module.exports = app => {\n\n  class TransactionController extends app.Controller {\n\n    async transaction() {\n      // user\n      const user = this.ctx.user.op;\n      // atomKey\n      const atomKey = this.ctx.request.body.key;\n      // itemNew\n      const itemNew = this.ctx.request.body.item;\n\n      // write\n      await this.ctx.meta.atom.write({\n        key: atomKey,\n        item: { atomName: itemNew.atomName },\n        user,\n      });\n      // write: throw error when personCount is 0\n      await this.ctx.meta.atom.write({\n        key: atomKey,\n        item: { personCount: itemNew.personCount },\n        user,\n      });\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return TransactionController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class TailController extends app.Controller {\n\n    async tail() {\n      // 1\n      this.ctx.meta._cache = 1;\n\n      // tail\n      this.ctx.tail(() => {\n        assert.equal(this.ctx.meta._cache, 2);\n      });\n\n      // 2\n      this.ctx.meta._cache = 2;\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return TailController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class SessionController extends app.Controller {\n\n    async session() {\n      // key1\n      this.ctx.session._key1 = 1;\n      // echo1\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'test/ctx/session/echo1',\n      });\n      assert.equal(res.user.op.id, this.ctx.user.op.id);\n      assert.equal(res.instance.id, this.ctx.instance.id);\n      assert.equal(this.ctx.session._key2, 2);\n      // done\n      this.ctx.success();\n    }\n\n    async echo1() {\n      // echo2\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'test/ctx/session/echo2',\n      });\n      // echo back\n      this.ctx.success(res);\n    }\n\n    async echo2() {\n      // check\n      assert.equal(this.ctx.session._key1, 1);\n      // key2\n      this.ctx.session._key2 = 2;\n      // echo back\n      this.ctx.success({\n        user: this.ctx.user,\n        instance: this.ctx.instance,\n      });\n    }\n\n  }\n\n  return SessionController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class RequestController extends app.Controller {\n\n    async request() {\n      // param\n      assert.equal(this.ctx.params.id, '1');\n      assert.equal(this.ctx.getInt('id'), 1);\n\n      // query\n      assert.equal(this.ctx.query.age, '18');\n      assert.equal(this.ctx.getInt('age'), 18);\n\n      // body\n      assert.equal(this.ctx.request.body.userName, 'zhennann');\n      assert.equal(this.ctx.getStr('userName'), 'zhennann');\n\n      // done\n      this.ctx.success();\n    }\n\n    async requestXML() {\n      // payload\n      const payload = await this.ctx.getPayload();\n      // return\n      this.ctx.status = 200;\n      this.ctx.type = 'text/xml';\n      this.ctx.body = payload.toString();\n    }\n\n  }\n\n  return RequestController;\n};\n","module.exports = app => {\n\n  class ResponseController extends app.Controller {\n\n    async success() {\n      const res = {\n        userName: 'zhennann',\n      };\n      this.ctx.success(res);\n    }\n\n    async successMore() {\n      const page = this.ctx.request.body.page;\n      const items = [\n        { userName: 'zhennann' },\n        { userName: 'root' },\n      ];\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n    async fail() {\n      // Error Test\n      this.ctx.fail(1001);\n    }\n\n    async throwError() {\n      this.ctx.throw(1001);\n    }\n\n  }\n\n  return ResponseController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class ConfigController extends app.Controller {\n\n    async test() {\n      // current module\n      let message = this.ctx.config.message;\n      assert.equal(message, 'Hello World');\n\n      // other module\n      message = this.ctx.config.module('test-party').message;\n      assert.equal(message, 'Hello World');\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return ConfigController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class LocaleController extends app.Controller {\n\n    async enus() {\n      const message = this.ctx.config.message;\n      const data = {\n        enus: this.ctx.text(message),\n        zhcn: this.ctx.text.locale('zh-cn', message),\n      };\n\n      // done\n      this.ctx.success(data);\n    }\n\n    async zhcn() {\n      const message = this.ctx.config.message;\n      const data = {\n        zhcn: this.ctx.text(message),\n        enus: this.ctx.text.locale('en-us', message),\n      };\n\n      // done\n      this.ctx.success(data);\n    }\n\n  }\n\n  return LocaleController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class MemController extends app.Controller {\n\n    async mem() {\n\n      // name\n      const name = '__test:name';\n\n      // set\n      this.ctx.cache.mem.set(name, 'zhennann');\n\n      // has\n      let res = this.ctx.cache.mem.has(name);\n      assert.equal(!!res, true);\n\n      // get\n      let value = this.ctx.cache.mem.get(name);\n      assert.equal(value, 'zhennann');\n\n      // remove\n      this.ctx.cache.mem.remove(name);\n      res = this.ctx.cache.mem.has(name);\n      assert.equal(res, null);\n\n      // set with timeout\n      this.ctx.cache.mem.set(name, 'zhennann', 1000);\n\n      // get\n      value = this.ctx.cache.mem.get(name);\n      assert.equal(value, 'zhennann');\n\n      // other module's cache\n      const moduleCache = this.ctx.cache.mem.module(this.ctx.module.info.relativeName);\n      value = moduleCache.get(name);\n      assert.equal(value, 'zhennann');\n\n      // get after timeout\n      await sleep(1500);\n      value = this.ctx.cache.mem.get(name);\n      assert.equal(value, null);\n\n      // clear\n      //   not clear, hold other caches\n      // this.ctx.cache.mem.clear();\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n  return MemController;\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class DbController extends app.Controller {\n\n    async db() {\n\n      // name\n      const name = '__test:name';\n\n      // set\n      await this.ctx.cache.db.set(name, 'zhennann');\n\n      // has\n      let res = await this.ctx.cache.db.has(name);\n      assert.equal(!!res, true);\n\n      // get\n      let value = await this.ctx.cache.db.get(name);\n      assert.equal(value, 'zhennann');\n\n      // remove\n      await this.ctx.cache.db.remove(name);\n      res = await this.ctx.cache.db.has(name);\n      assert.equal(res, null);\n\n      // set with timeout\n      await this.ctx.cache.db.set(name, 'zhennann', 1000);\n\n      // get\n      value = await this.ctx.cache.db.get(name);\n      assert.equal(value, 'zhennann');\n\n      // other module's cache\n      const moduleCache = this.ctx.cache.db.module(this.ctx.module.info.relativeName);\n      value = await moduleCache.get(name);\n      assert.equal(value, 'zhennann');\n\n      // get after timeout\n      await sleep(1500);\n      value = await this.ctx.cache.db.get(name);\n      assert.equal(value, undefined);\n\n      // clear\n      //   not clear, hold other caches\n      // await this.ctx.cache.db.clear();\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n  return DbController;\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class UserRoleController extends app.Controller {\n\n    async userRole() {\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      // roleIds\n      const roleIds = this.ctx.cache.mem.get('roleIds');\n\n      // direct\n      let list = await this.ctx.meta.role.getUserRolesDirect({ userId: userIds.root });\n      assert.equal(list.length, 1);\n      // parent\n      list = await this.ctx.meta.role.getUserRolesParent({ userId: userIds.root });\n      assert.equal(list.length, 3);\n      // expand\n      list = await this.ctx.meta.role.getUserRolesExpand({ userId: userIds.root });\n      assert(list.length > 3);\n\n      // direct\n      let res = await this.ctx.meta.role.userInRoleDirect({\n        userId: userIds.root, roleId: roleIds.superuser,\n      });\n      assert.equal(res, true);\n      // parent\n      res = await this.ctx.meta.role.userInRoleParent({\n        userId: userIds.root, roleId: roleIds.root,\n      });\n      assert.equal(res, true);\n      // expand\n      res = await this.ctx.meta.role.userInRoleExpand({\n        userId: userIds.root, roleId: roleIds.system,\n      });\n      assert.equal(res, true);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return UserRoleController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n\n  class HelloController extends app.Controller {\n\n    async hello() {\n      const data = {\n        text: 'hello',\n      };\n      const res = await this.ctx.meta.event.invoke({\n        module: moduleInfo.relativeName, name: 'hello', data,\n      });\n      assert.equal(data.text, 'hello echo');\n      assert.equal(res, 'returnValue');\n      this.ctx.success(res);\n    }\n\n    async helloEcho() {\n      const event = this.ctx.request.body.event;\n      const data = this.ctx.request.body.data;\n      data.text = 'hello echo';\n      event.break = true;\n      this.ctx.success('returnValue');\n    }\n\n  }\n\n  return HelloController;\n};\n\n","const require3 = require('require3');\nconst extend = require3('extend2');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class UserVerifyController extends app.Controller {\n\n    async userVerify() {\n      const data = this.ctx.request.body.data;\n      // console.log('onUserVerify profileId: ', data.profileUser.profileId);\n      assert(data.profileUser.profileId > 0);\n      this.ctx.success();\n    }\n\n    async loginInfo() {\n      // change the config of mobile layout by checking the user's login status\n      const data = this.ctx.request.body.data;\n      const info = data.info;\n      const provider = info.user && info.user.provider;\n      if (provider && provider.module === 'a-authgithub' && provider.providerName === 'authgithub') {\n        info.config = extend(true, info.config, {\n          modules: {\n            'a-layoutmobile': {\n              layout: {\n                login: '/a/login/login',\n                loginOnStart: true,\n                toolbar: {\n                  tabbar: true, labels: true, bottomMd: true,\n                },\n                tabs: [\n                  { name: 'Mine', tabLinkActive: true, iconMaterial: 'person', url: '/a/user/user/mine' },\n                ],\n              },\n            },\n          },\n        });\n      }\n      this.ctx.success();\n    }\n\n  }\n\n  return UserVerifyController;\n};\n\n","module.exports = app => {\n\n  class HttpLogController extends app.Controller {\n\n    async httpLog() {\n      // please see: {projectDir}/src/backend/logs/{projectName}/{projectName}-web.log\n      this.ctx.success('this is a test for httpLog');\n    }\n\n  }\n\n  return HttpLogController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class StartupController extends app.Controller {\n\n    async all() {\n      console.log('test/feat/startup: all');\n      assert.equal(this.ctx.instance, undefined);\n      this.ctx.success();\n    }\n\n    async instance() {\n      console.log(`test/feat/startup: instance:${this.ctx.instance.id}`);\n      assert(this.ctx.instance.id > 0);\n      this.ctx.success();\n    }\n\n  }\n\n  return StartupController;\n};\n","module.exports = app => {\n\n  class SendMailController extends app.Controller {\n\n    async sendMail() {\n      // send\n      await this.ctx.meta.mail.send({\n        scene: 'test',\n        message: {\n          to: 'test@cabloy.com',\n          subject: 'this is a test',\n          text: 'message body!',\n        },\n      });\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return SendMailController;\n\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class HookController extends app.Controller {\n\n    async echo() {\n      const data = this.ctx.request.body.data;\n      assert.equal(data.text, 'before');\n      data.text = 'before:echo';\n      this.ctx.success();\n    }\n\n    async echoBefore() {\n      const ctxCaller = this.ctx.ctxCaller;\n      ctxCaller.request.body.data = { text: 'before' };\n      this.ctx.success();\n    }\n    async echoAfter() {\n      const ctxCaller = this.ctx.ctxCaller;\n      const data = ctxCaller.request.body.data;\n      assert.equal(data.text, 'before:echo');\n      this.ctx.success();\n    }\n\n  }\n\n  return HookController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class InstanceController extends app.Controller {\n\n    async instance() {\n      assert.equal(!!this.ctx.instance.id, true);\n      assert.equal(!!this.ctx.instance.config, true);\n      this.ctx.success();\n    }\n\n  }\n  return InstanceController;\n};\n","module.exports = app => {\n\n  class ProgressController extends app.Controller {\n\n    async progress() {\n      // create progress\n      const progressId = await this.ctx.meta.progress.create();\n      // background\n      this.ctx.performActionInBackground({\n        method: 'post',\n        url: 'test/feat/progressInBackground',\n        body: {\n          progressId,\n        },\n      });\n      // return progressId\n      this.ctx.success({ progressId });\n    }\n\n    async progressInBackground() {\n      const progressId = this.ctx.request.body.progressId;\n      try {\n        // level one\n        await this._levelOne({ progressId, progressNo: 0 });\n        // progress done\n        await this.ctx.meta.progress.done({ progressId, message: this.ctx.text('Well Done') });\n        // ok\n        this.ctx.success(true);\n      } catch (err) {\n        // progress error\n        await this.ctx.meta.progress.error({ progressId, message: err.message });\n        // throw err\n        throw err;\n      }\n    }\n\n    async _levelOne({ progressId, progressNo }) {\n      const total = 2;\n      let current = 0;\n      for (let i = 0; i < total; i++) {\n        const text = `${this.ctx.text('Level One')}: ${i + 1}`;\n        await this.ctx.meta.progress.update({\n          progressId,\n          progressNo,\n          total,\n          progress: current++,\n          text,\n        });\n        // sleep\n        await this.ctx.meta.util.sleep(1500);\n        // level two\n        await this._levelTwo({ progressId, progressNo: progressNo + 1 });\n      }\n    }\n\n    async _levelTwo({ progressId, progressNo }) {\n      const total = 2;\n      let current = 0;\n      for (let i = 0; i < total; i++) {\n        const text = `${this.ctx.text('Level Two')}: ${i + 1}`;\n        await this.ctx.meta.progress.update({\n          progressId,\n          progressNo,\n          total,\n          progress: current++,\n          text,\n        });\n        // sleep\n        await this.ctx.meta.util.sleep(1500);\n        // level two\n        await this._levelThree({ progressId, progressNo: progressNo + 1 });\n      }\n    }\n\n    async _levelThree({ progressId, progressNo }) {\n      const total = 3;\n      let current = 0;\n      for (let i = 0; i < total; i++) {\n        const text = `${this.ctx.text('Level Three')}: ${i + 1}`;\n        await this.ctx.meta.progress.update({\n          progressId,\n          progressNo,\n          total,\n          progress: current++,\n          text,\n        });\n        // sleep\n        await this.ctx.meta.util.sleep(1500);\n      }\n    }\n\n  }\n  return ProgressController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\nconst pMap = require3('p-map');\n\nmodule.exports = app => {\n\n  class SequenceController extends app.Controller {\n\n    async sequence() {\n\n      // current\n      let current = await this.ctx.meta.sequence.current('test');\n      assert.equal(current, 0);\n\n      // next\n      let next = await this.ctx.meta.sequence.next('test');\n      assert.equal(next, 1);\n\n      // current\n      current = await this.ctx.meta.sequence.current('test');\n      assert.equal(current, 1);\n\n      // reset\n      await this.ctx.meta.sequence.reset('test');\n\n      // other module's sequence\n      const moduleSequence = this.ctx.meta.sequence.module(this.ctx.module.info.relativeName);\n\n      // next\n      next = await moduleSequence.next('test');\n      assert.equal(next, 1);\n\n      // current\n      current = await moduleSequence.current('test');\n      assert.equal(current, 1);\n\n      // reset\n      await moduleSequence.reset('test');\n\n      // concurrency\n      const results = await pMap([ 1, 2, 3, 4, 5 ], async () => {\n        return await moduleSequence.next('test');\n      });\n      assert.equal(results.join(','), '1,2,3,4,5');\n\n      // reset\n      await moduleSequence.reset('test');\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n  return SequenceController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class SettingsController extends app.Controller {\n\n    async settings() {\n\n      // user\n\n      // get settings from config\n      let data = await this.ctx.meta.settings.getUser({ name: '/groupInfo/username' });\n      assert.equal(data, 'zhennann');\n      data = await this.ctx.meta.settings.getUser({ name: '/groupExtra/panelExtra/groupInfo/language' });\n      assert.equal(data, 'en-us');\n\n      // load settings\n      data = await this.ctx.meta.settings.loadSettingsUser();\n      assert.equal(data.groupInfo.username, 'zhennann');\n      // save settings\n      data.groupExtra.panelExtra.groupInfo.language = 'zh-cn';\n      await this.ctx.meta.settings.saveSettingsUser({ data });\n\n      // get settings from db\n      data = await this.ctx.meta.settings.getUser({ name: '/groupExtra/panelExtra/groupInfo/language' });\n      assert.equal(data, 'zh-cn');\n\n      // instance\n\n      // get settings from config\n      data = await this.ctx.meta.settings.getInstance({ name: '/groupInfo/slogan' });\n      assert.equal(data, '');\n\n      // load settings\n      data = await this.ctx.meta.settings.loadSettingsInstance();\n      assert.equal(data.groupInfo.slogan, '');\n      // save settings\n      data.groupInfo.slogan = 'Less is more, while more is less';\n      await this.ctx.meta.settings.saveSettingsInstance({ data });\n\n      // get settings from db\n      data = await this.ctx.meta.settings.getInstance({ name: '/groupInfo/slogan' });\n      assert.equal(data, 'Less is more, while more is less');\n\n      // ok\n      this.ctx.success();\n    }\n\n  }\n  return SettingsController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class StatusController extends app.Controller {\n\n    async status() {\n\n      // name\n      const name = '__test_enable';\n\n      // get\n      let value = await this.ctx.meta.status.get(name);\n      assert.equal(value, undefined);\n\n      // set\n      await this.ctx.meta.status.set(name, true);\n\n      // get\n      value = await this.ctx.meta.status.get(name);\n      assert.equal(value, true);\n\n      // other module's status\n      const moduleStatus = this.ctx.meta.status.module(this.ctx.module.info.relativeName);\n      value = await moduleStatus.get(name);\n      assert.equal(value, true);\n\n      // set\n      await this.ctx.meta.status.set(name, false);\n\n      // get\n      value = await this.ctx.meta.status.get(name);\n      assert.equal(value, false);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n  return StatusController;\n};\n\n","module.exports = app => {\n\n  class ValidationController extends app.Controller {\n\n    async success() {\n      this.ctx.success();\n    }\n\n    async fail() {\n      this.ctx.success();\n    }\n\n    async schema() {\n      this.ctx.success();\n    }\n\n  }\n\n  return ValidationController;\n};\n\n","module.exports = app => {\n\n  class TestController extends app.Controller {\n\n    async interception() {\n      const { a, b } = this.ctx.request.body;\n      const c = parseInt(a) + parseInt(b);\n      this.ctx.success(c);\n    }\n\n    async restructuring() {\n      const { a, b } = this.ctx.request.body;\n      const c = a + b;\n      this.ctx.success(c);\n    }\n\n    async injection() {\n      const { a, b } = this.ctx.request.body;\n      const c = this.ctx.meta.__plus(a, b);\n      this.ctx.success(c);\n    }\n\n  }\n\n  return TestController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class QueueController extends app.Controller {\n\n    async queue() {\n      const { a, b } = this.ctx.request.body;\n      const c = a + b;\n      this.ctx.success(c);\n    }\n\n    async pushAsync() {\n      const res = await this.ctx.app.meta.queue.pushAsync({\n        subdomain: this.ctx.subdomain,\n        module: 'test-party',\n        queueName: 'queueTest',\n        data: { a: 1, b: 2 },\n      });\n      assert.equal(res, 3);\n      this.ctx.success();\n    }\n\n    async push() {\n      this.ctx.app.meta.queue.push({\n        subdomain: this.ctx.subdomain,\n        module: 'test-party',\n        queueName: 'queueTest',\n        data: { a: 1, b: 2 },\n      });\n      this.ctx.success();\n    }\n\n  }\n\n  return QueueController;\n\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class BroadcastController extends app.Controller {\n\n    async broadcast() {\n      const { sameAsCaller, message } = this.ctx.request.body;\n      if (!sameAsCaller) {\n        // do something\n      }\n      assert.equal(message, 'hello');\n      this.ctx.success();\n    }\n\n    async emit() {\n      this.ctx.app.meta.broadcast.emit({\n        subdomain: this.ctx.subdomain,\n        module: 'test-party',\n        broadcastName: 'broadcastTest',\n        data: { message: 'hello' },\n      });\n      this.ctx.success();\n    }\n\n  }\n\n  return BroadcastController;\n\n};\n","const languages = require('./data/autocomplete-languages.json');\n\nmodule.exports = app => {\n\n  class AutocompleteController extends app.Controller {\n\n    async languages() {\n      const query = this.ctx.params.query;\n      let data;\n      if (!query) {\n        data = [];\n      } else {\n        data = languages.filter(item => {\n          return item.name.toLowerCase().indexOf(query.toLowerCase()) === 0;\n        });\n      }\n      this.ctx.success(data);\n    }\n\n  }\n\n  return AutocompleteController;\n};\n\n","module.exports = app => {\n\n  class GuideController extends app.Controller {\n\n    async echo() {\n      const message = 'Hello World';\n      this.ctx.success(message);\n    }\n\n    async echo2() {\n      const message = this.ctx.config.message;\n      this.ctx.success(message);\n    }\n\n    async echo3() {\n      const message = this.ctx.text('Hello World');\n      this.ctx.success(message);\n    }\n\n    async echo4() {\n      const { message, markCount } = this.ctx.request.body;\n      const res = `${message}${new Array(markCount + 1).join('!')}`;\n      this.ctx.success(res);\n    }\n\n    async echo6() {\n      // testParty: insert/udpate/delete/get\n\n      // insert\n      const res = await this.ctx.db.insert('testParty', {\n        iid: this.ctx.instance.id,\n        deleted: 0,\n        personCount: 3,\n      });\n      const id = res.insertId;\n      // update\n      await this.ctx.db.update('testParty', {\n        id,\n        personCount: 5,\n      });\n      // get\n      const item = await this.ctx.db.get('testParty', {\n        id,\n      });\n      // delete\n      await this.ctx.db.delete('testParty', {\n        id,\n      });\n      // ok\n      this.ctx.success(item);\n    }\n\n    async echo7() {\n      // testParty: insert/udpate/delete/get\n\n      // insert\n      const res = await this.ctx.model.party.insert({ personCount: 3 });\n      const id = res.insertId;\n      // update\n      await this.ctx.model.party.update({ id, personCount: 6 });\n      // get\n      const item = await this.ctx.model.party.get({ id });\n      // delete\n      await this.ctx.model.party.delete({ id });\n      // ok\n      this.ctx.success(item);\n    }\n\n    async echo8() {\n      // transaction\n\n      // insert\n      const res = await this.ctx.model.party.insert({ personCount: 3 });\n      const id = res.insertId;\n      // will throw error\n      await this.ctx.model.party.update({ id, personCountA: 6 });\n      // never here\n      this.ctx.success();\n    }\n\n    async echo9() {\n      // Menu Authorization\n      // ok\n      this.ctx.success('ok');\n    }\n\n  }\n\n  return GuideController;\n};\n\n","module.exports = app => {\n\n  class FormSchemaValidationController extends app.Controller {\n\n    async load() {\n      // try load from db cache\n      const cacheName = this._getCacheName();\n      let item = await this.ctx.cache.db.get(cacheName);\n      if (!item) {\n        item = {\n          userName: '',\n          password: '',\n          passwordAgain: '',\n          sex: 0,\n          language: '',\n          avatar: '',\n          rememberMe: false,\n        };\n      }\n      // ok\n      this.ctx.success(item);\n    }\n\n    async saveSimple() {\n      // item\n      const item = this.ctx.request.body.data;\n      // save to db cache\n      const cacheName = this._getCacheName();\n      await this.ctx.cache.db.set(cacheName, item);\n      // ok\n      this.ctx.success();\n    }\n\n    async saveValidation() {\n      await this.saveSimple();\n    }\n\n    // form-captcha signup\n    signup() {\n      this.ctx.success();\n    }\n\n    _getCacheName() {\n      // get the operation user\n      const user = this.ctx.user.op;\n      return `__formTest:${user.id}`;\n    }\n\n  }\n\n  return FormSchemaValidationController;\n};\n\n","\nconst gTestListMax = 89;\n\nmodule.exports = app => {\n\n  class PtrIsLoadMoreController extends app.Controller {\n\n    async list() {\n      // page\n      let page = this.ctx.request.body.page;\n      // adjust page\n      page = this.ctx.meta.util.page(page, false);\n      // items\n      const items = [];\n      for (let i = 0; i < page.size; i++) {\n        const itemId = page.index + i + 1;\n        if (itemId > gTestListMax) break;\n        items.push({\n          id: itemId,\n          title: `${this.ctx.text('Item')} - ${itemId}`,\n        });\n      }\n      // ok\n      this.ctx.successMore(items, page.index, page.size);\n    }\n\n  }\n\n  return PtrIsLoadMoreController;\n};\n\n","const version = require('./service/version.js');\nconst party = require('./service/party.js');\nconst partyPublic = require('./service/partyPublic.js');\n\nmodule.exports = app => {\n  const services = {\n    version,\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    Object.assign(services, {\n      party,\n      partyPublic,\n    });\n  }\n  return services;\n};\n","const VersionTestFn = require('./version/test.js');\n\nmodule.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n      // only in test/local\n      if (!this.app.meta.isTest && !this.app.meta.isLocal) return;\n\n      // update\n      if (options.version === 1) {\n        let sql = `\n          CREATE TABLE testParty (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            personCount int(11) DEFAULT '0',\n            partyTypeId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE TABLE testPartyType (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            name varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE VIEW testPartyView as\n            select a.*,b.name as partyTypeName from testParty a\n              left join testPartyType b on a.partyTypeId=b.id\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE TABLE testPartyPublic (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {\n      // only in test/local\n      if (!this.app.meta.isTest && !this.app.meta.isLocal) return;\n\n      // init\n      if (options.version === 1) {\n        // types\n        for (const name of [ 'Birthday', 'Dance', 'Garden' ]) {\n          await this.ctx.model.partyType.insert({ name });\n        }\n      }\n\n      //\n      if (options.version === 2) {\n        // // roleFunctions\n        // const roleRoot = await this.ctx.meta.role.getSystemRole({ roleName: 'root' });\n        // const functions = [ 'kichenSink' ];\n        // for (const functionName of functions) {\n        //   const func = await this.ctx.meta.function.get({\n        //     name: functionName,\n        //   });\n        //   await this.ctx.meta.role.addRoleFunction({\n        //     roleId: roleRoot.id,\n        //     functionId: func.id,\n        //   });\n        // }\n      }\n\n      //\n      if (options.version === 3) {\n        // delete old function\n        await this.ctx.meta.function.delete({ name: 'kichenSink' });\n\n        // roleFunctions\n        const roleFunctions = [\n          { roleName: 'root', name: 'kitchenSink' },\n        ];\n        await this.ctx.meta.role.addRoleFunctionBatch({ roleFunctions });\n      }\n\n      //\n      if (options.version === 4) {\n        // add role rights\n        const roleRights = [\n          { roleName: 'system', action: 'create' },\n          { roleName: 'system', action: 'write', scopeNames: 0 },\n          { roleName: 'system', action: 'delete', scopeNames: 0 },\n          { roleName: 'system', action: 'read', scopeNames: 'authenticated' },\n          { roleName: 'system', action: 'review', scopeNames: 'authenticated' },\n        ];\n        await this.ctx.meta.role.addRoleRightBatch({ atomClassName: 'party', roleRights });\n      }\n\n    }\n\n    async test() {\n      const versionTest = new (VersionTestFn(this.ctx))();\n      await versionTest.run();\n    }\n\n  }\n\n  return Version;\n};\n","const testData = require('./testData.js');\n\nmodule.exports = function(ctx) {\n\n  class VersionTest {\n\n    async run() {\n\n      // roles\n      const roleIds = await this._testRoles();\n\n      // role includes\n      await this._testRoleIncs(roleIds);\n\n      // set role dirty\n      await ctx.meta.role.setDirty(true);\n\n      // users\n      const userIds = await this._testUsers(roleIds);\n\n      // role rights\n      await this._testRoleRights(roleIds);\n\n      // cache\n      this._testCache(roleIds, userIds);\n    }\n\n    _testCache(roleIds, userIds) {\n      // cache roles\n      ctx.cache.mem.set('roleIds', roleIds);\n      // cache users\n      ctx.cache.mem.set('userIds', userIds);\n    }\n\n    // roles\n    async _testRoles() {\n      const roleIds = {};\n      // system roles\n      for (const roleName of ctx.constant.module('a-base').systemRoles) {\n        const role = await ctx.meta.role.getSystemRole({ roleName });\n        roleIds[roleName] = role.id;\n      }\n      // roles\n      for (const [ roleName, leader, catalog, roleNameParent ] of testData.roles) {\n        roleIds[roleName] = await ctx.meta.role.add({\n          roleName,\n          leader,\n          catalog,\n          roleIdParent: roleIds[roleNameParent],\n        });\n      }\n\n      return roleIds;\n    }\n\n    // role incs\n    async _testRoleIncs(roleIds) {\n      for (const [ roleId, roleIdInc ] of testData.roleIncs) {\n        await ctx.meta.role.addRoleInc({\n          roleId: roleIds[roleId],\n          roleIdInc: roleIds[roleIdInc],\n        });\n      }\n    }\n\n    // users\n    async _testUsers(roleIds) {\n      // userIds\n      const userIds = {};\n      for (const [ userName, roleName ] of testData.users) {\n        // add\n        userIds[userName] = await ctx.meta.user.add({\n          userName,\n          realName: userName,\n        });\n        // activated\n        await ctx.meta.user.save({\n          user: { id: userIds[userName], activated: 1 },\n        });\n        // role\n        await ctx.meta.role.addUserRole({\n          userId: userIds[userName],\n          roleId: roleIds[roleName],\n        });\n      }\n\n      // auths\n      await this._testAuths(userIds);\n\n      // root\n      const userRoot = await ctx.meta.user.get({ userName: 'root' });\n      userIds.root = userRoot.id;\n      return userIds;\n    }\n\n    // role rights\n    async _testRoleRights() {\n      await ctx.meta.role.addRoleRightBatch({ atomClassName: 'party', roleRights: testData.roleRights });\n    }\n\n    // auths\n    async _testAuths(userIds) {\n      for (const userName in userIds) {\n        await ctx.performAction({\n          method: 'post',\n          url: '/a/authsimple/auth/add',\n          body: {\n            userId: userIds[userName],\n            password: '',\n          },\n        });\n      }\n    }\n\n  }\n\n  return VersionTest;\n};\n","// roleName, leader, catalog, roleNameParent\nconst roles = [\n  [ 'friend', 0, 0, 'external' ],\n  [ 'consultant', 0, 1, 'external' ],\n  [ 'study', 0, 0, 'consultant' ],\n  [ 'work', 0, 0, 'consultant' ],\n  [ 'life', 0, 0, 'consultant' ],\n  [ 'family', 0, 1, 'internal' ],\n  [ 'father', 0, 0, 'family' ],\n  [ 'mother', 1, 0, 'family' ],\n  [ 'son', 0, 0, 'family' ],\n  [ 'daughter', 0, 0, 'family' ],\n];\n\n// friend->family\nconst roleIncs = [\n  [ 'friend', 'family' ],\n];\n\n// family and friend\n//   userName, roleName\nconst users = [\n  [ 'Tom', 'father' ], [ 'Jane', 'mother' ], [ 'Tomson', 'son' ], [ 'Jannie', 'daughter' ],\n  [ 'Jimmy', 'friend' ], [ 'Rose', 'friend' ],\n  [ 'Smith', 'life' ],\n];\n\n// roleRights\nconst roleRights = [\n  { roleName: 'family', action: 'create' },\n  { roleName: 'family', action: 'read', scopeNames: 'family' },\n  { roleName: 'mother', action: 'review', scopeNames: 'family' },\n  { roleName: 'authenticated', action: 'write', scopeNames: 0 },\n  { roleName: 'authenticated', action: 'delete', scopeNames: 0 },\n  { roleName: 'consultant', action: 'read', scopeNames: 'family' },\n];\n\nmodule.exports = {\n  roles,\n  roleIncs,\n  users,\n  roleRights,\n};\n","module.exports = app => {\n\n  const gPartyTypeEmojis = {\n    Birthday: '🎂',\n    Dance: '💃',\n    Garden: '🏡',\n  };\n\n  class Party extends app.Service {\n\n    async create({ atomClass, key, item, user }) {\n      // add party\n      const res = await this.ctx.model.party.insert({\n        atomId: key.atomId,\n      });\n      return { atomId: key.atomId, itemId: res.insertId };\n    }\n\n    _getMeta(item) {\n      // flags\n      const flags = [];\n      if (item.personCount) {\n        flags.push(item.personCount);\n      }\n      // summary\n      let summary;\n      if (item.partyTypeName) {\n        summary = `${gPartyTypeEmojis[item.partyTypeName]}${this.ctx.text(item.partyTypeName)}`;\n      }\n      // meta\n      const meta = {\n        flags,\n        summary,\n      };\n      // ok\n      item._meta = meta;\n    }\n\n    async read({ atomClass, key, item, user }) {\n      // read\n      this._getMeta(item);\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // select\n      for (const item of items) {\n        this._getMeta(item);\n      }\n    }\n\n    async write({ atomClass, key, item, user }) {\n      // update party\n      await this.ctx.model.party.update({\n        id: key.itemId,\n        personCount: item.personCount,\n        partyTypeId: item.partyTypeId,\n      });\n    }\n\n    async delete({ atomClass, key, user }) {\n      // delete party\n      await this.ctx.model.party.delete({\n        id: key.itemId,\n      });\n    }\n\n    async action({ action, atomClass, key, user }) {\n      if (action === 101) {\n        // change flag\n        await this.ctx.meta.atom.flag({\n          key,\n          atom: { atomFlag: 2 },\n          user,\n        });\n      }\n    }\n\n    async enable({ atomClass, key, atom, user }) {\n      // enable\n      const atomFlag = atom.atomEnabled ? 1 : 0;\n      // change flag\n      await this.ctx.meta.atom.flag({\n        key,\n        atom: { atomFlag },\n        user,\n      });\n    }\n\n    async types({ empty }) {\n      const items = await this.ctx.model.partyType.select();\n      return items.map(item => {\n        return {\n          id: item.id,\n          name: this.ctx.text(item.name),\n        };\n      });\n    }\n\n  }\n\n  return Party;\n};\n","module.exports = app => {\n\n  class PartyPublic extends app.Service {\n\n    async create({ atomClass, key, item, user }) {\n      const res = await this.ctx.model.partyPublic.insert({\n        atomId: key.atomId,\n      });\n      return { atomId: key.atomId, itemId: res.insertId };\n    }\n\n    async read({ atomClass, key, item, user }) {\n    }\n\n    async select({ atomClass, options, items, user }) {\n    }\n\n    async write({ atomClass, key, item, user }) {\n    }\n\n    async delete({ atomClass, key, user }) {\n      await this.ctx.model.partyPublic.delete({\n        id: key.itemId,\n      });\n    }\n\n    async action({ action, atomClass, key, user }) {\n    }\n\n    async enable({ atomClass, key, atom, user }) {\n    }\n\n  }\n\n  return PartyPublic;\n};\n","const party = require('./model/party.js');\nconst partyType = require('./model/partyType.js');\nconst partyPublic = require('./model/partyPublic.js');\n\nmodule.exports = app => {\n  const models = {\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    Object.assign(models, {\n      party,\n      partyType,\n      partyPublic,\n    });\n  }\n  return models;\n};\n","module.exports = app => {\n\n  class Party extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testParty', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return Party;\n};\n","module.exports = app => {\n\n  class PartyType extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testPartyType', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return PartyType;\n};\n","module.exports = app => {\n\n  class PartyPublic extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testPartyPublic', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return PartyPublic;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nmodule.exports = app => {\n  const meta = {\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    // schemas\n    const schemas = require('./config/validation/schemas.js')(app);\n    // keywords\n    const keywords = require('./config/validation/keywords.js')(app);\n    // meta\n    extend(true, meta, {\n      base: {\n        atoms: {\n          party: {\n            info: {\n              title: 'Party',\n              tableName: 'testPartyView',\n              flow: 0,\n            },\n            actions: {\n              review: {\n                code: 101,\n                title: 'Review',\n                flag: '1',\n              },\n            },\n            flags: {\n              1: {\n                title: 'Reviewing',\n              },\n              2: {\n                title: 'Reviewed',\n              },\n            },\n            validator: 'party',\n            search: {\n              validator: 'partySearch',\n            },\n          },\n        },\n        functions: {\n          createParty: {\n            title: 'Create Party',\n            scene: 'create',\n            autoRight: 1,\n            atomClassName: 'party',\n            action: 'create',\n            sorting: 1,\n            menu: 1,\n          },\n          listParty: {\n            title: 'Party List',\n            scene: 'list',\n            autoRight: 1,\n            atomClassName: 'party',\n            action: 'read',\n            sorting: 1,\n            menu: 1,\n          },\n          kitchenSink: {\n            title: 'Kitchen-sink',\n            scene: 'tools',\n            actionPath: 'kitchen-sink/index',\n            sorting: 1,\n            menu: 1,\n          },\n        },\n      },\n      validation: {\n        validators: {\n          party: {\n            schemas: 'party',\n          },\n          partySearch: {\n            schemas: 'partySearch',\n          },\n          userTest: {\n            schemas: 'settingsUser,settingsUserExtra',\n          },\n          instanceTest: {\n            schemas: 'settingsInstance',\n          },\n          formTest: {\n            schemas: 'formTest',\n          },\n          formCaptchaTest: {\n            schemas: 'formCaptchaTest',\n          },\n        },\n        keywords: {\n          'x-languages': keywords.languages,\n        },\n        schemas: {\n          party: schemas.party,\n          partySearch: schemas.partySearch,\n          settingsUser: schemas.settingsUser,\n          settingsUserExtra: schemas.settingsUserExtra,\n          settingsInstance: schemas.settingsInstance,\n          formTest: schemas.formTest,\n          formCaptchaTest: schemas.formCaptchaTest,\n        },\n      },\n      settings: {\n        user: {\n          validator: 'userTest',\n        },\n        instance: {\n          validator: 'instanceTest',\n        },\n      },\n      index: {\n        indexes: {\n          testParty: 'createdAt,updatedAt,atomId,partyTypeId',\n        },\n      },\n    });\n  }\n  if (app.meta.isTest) {\n    // meta\n    extend(true, meta, {\n      base: {\n        atoms: {\n          partyPublic: {\n            info: {\n              tableName: 'testPartyPublic',\n              public: 1,\n              flow: 1,\n            },\n          },\n        },\n        functions: {\n          testFunctionPublic: {\n            scene: 'tools',\n            menu: 1,\n            public: 1,\n          },\n        },\n      },\n      event: {\n        declarations: {\n          hello: 'This is a test for event',\n        },\n        implementations: {\n          'test-party:hello': 'test/event/helloEcho',\n          'a-base:userVerify': 'test/event/userVerify',\n          'a-base:loginInfo': 'test/event/loginInfo',\n        },\n      },\n      hook: {\n        before: [\n          { path: '/test/party/test/feat/hook/echo', route: 'test/feat/hook/echoBefore' },\n        ],\n        after: [\n          { path: '/test/party/test/feat/hook/echo', route: 'test/feat/hook/echoAfter' },\n        ],\n      },\n      sequence: {\n        providers: {\n          test: {\n            start: 0,\n            expression({ ctx, value }) {\n              return ++value;\n            },\n          },\n        },\n      },\n    });\n  }\n  return meta;\n};\n","module.exports = app => {\n  const schemas = {};\n  // party\n  schemas.party = {\n    type: 'object',\n    properties: {\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Party Name',\n        notEmpty: true,\n      },\n      personCount: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Person Count',\n        notEmpty: true,\n      },\n      partyTypeId: {\n        type: 'number',\n        ebType: 'select',\n        ebTitle: 'Party Type',\n        ebOptionsUrl: '/test/party/party/types',\n        ebOptionTitleKey: 'name',\n        ebOptionValueKey: 'id',\n        ebOptionsBlankAuto: true,\n        notEmpty: true,\n      },\n    },\n  };\n  // party search\n  schemas.partySearch = {\n    type: 'object',\n    properties: {\n      partyTypeId: {\n        type: 'number',\n        ebType: 'select',\n        ebTitle: 'Party Type',\n        ebOptionsUrl: '/test/party/party/types',\n        ebOptionTitleKey: 'name',\n        ebOptionValueKey: 'id',\n        ebOptionsBlankAuto: true,\n      },\n    },\n  };\n\n  // settings\n  schemas.settingsUser = {\n    type: 'object',\n    properties: {\n      groupInfo: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        properties: {\n          username: {\n            type: 'string',\n            ebType: 'text',\n            ebTitle: 'My Name',\n            notEmpty: true,\n          },\n        },\n      },\n      groupExtra: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Extra Group',\n        properties: {\n          panelExtra: {\n            ebType: 'panel',\n            ebTitle: 'Extra',\n            $ref: 'settingsUserExtra',\n          },\n        },\n      },\n    },\n  };\n  schemas.settingsUserExtra = {\n    type: 'object',\n    ebTitle: 'Extra',\n    properties: {\n      groupInfo: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        properties: {\n          mobile: {\n            type: 'string',\n            ebType: 'text',\n            ebTitle: 'Mobile',\n            notEmpty: true,\n          },\n          sex: {\n            type: 'number',\n            ebType: 'select',\n            ebTitle: 'Sex',\n            ebMultiple: false,\n            ebOptions: [\n              { title: 'Male', value: 1 },\n              { title: 'Female', value: 2 },\n            ],\n            ebParams: {\n              openIn: 'page',\n              closeOnSelect: true,\n            },\n            notEmpty: true,\n          },\n          language: {\n            type: 'string',\n            ebType: 'select',\n            ebTitle: 'Language',\n            ebOptionsUrl: '/a/base/base/locales',\n            ebOptionsUrlParams: null,\n            'x-languages': true,\n            notEmpty: true,\n          },\n        },\n      },\n    },\n  };\n  schemas.settingsInstance = {\n    type: 'object',\n    properties: {\n      groupInfo: {\n        type: 'object',\n        ebType: 'group',\n        ebTitle: 'Info Group',\n        properties: {\n          slogan: {\n            type: 'string',\n            ebType: 'text',\n            ebTitle: 'Slogan',\n            notEmpty: true,\n          },\n        },\n      },\n    },\n  };\n  schemas.formTest = {\n    type: 'object',\n    properties: {\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        notEmpty: true,\n      },\n      password: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Password',\n        ebSecure: true,\n        notEmpty: true,\n        minLength: 6,\n      },\n      passwordAgain: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Password again',\n        ebSecure: true,\n        notEmpty: true,\n        const: { $data: '1/password' },\n      },\n      sex: {\n        type: 'number',\n        ebType: 'select',\n        ebTitle: 'Sex',\n        ebMultiple: false,\n        ebOptions: [\n          { title: 'Male', value: 1 },\n          { title: 'Female', value: 2 },\n        ],\n        ebOptionsBlankAuto: true,\n        ebParams: {\n          openIn: 'page',\n          closeOnSelect: true,\n        },\n        notEmpty: true,\n      },\n      language: {\n        type: 'string',\n        ebType: 'select',\n        ebTitle: 'Language',\n        ebOptionsUrl: '/a/base/base/locales',\n        ebOptionsUrlParams: null,\n        ebOptionsBlankAuto: true,\n        'x-languages': true,\n        // notEmpty: true,\n      },\n      avatar: {\n        type: 'string',\n        ebType: 'file',\n        ebTitle: 'Avatar',\n        ebParams: { mode: 1 },\n        notEmpty: true,\n      },\n      rememberMe: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Remember me',\n      },\n    },\n  };\n  schemas.formCaptchaTest = {\n    type: 'object',\n    properties: {\n      userName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Username',\n        notEmpty: true,\n      },\n      password: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Password',\n        ebSecure: true,\n        notEmpty: true,\n        minLength: 6,\n      },\n    },\n  };\n\n  return schemas;\n};\n","module.exports = app => {\n  const keywords = {};\n  keywords.languages = {\n    async: true,\n    type: 'string',\n    errors: true,\n    compile(sch, parentSchema) {\n      return async function(data) {\n        const ctx = this;\n        const locales = await ctx.performAction({\n          method: 'post',\n          url: parentSchema.ebOptionsUrl,\n          body: parentSchema.ebOptionsUrlParams,\n        });\n        const index = locales.findIndex(item => item.value === data);\n        if (index > -1) return true;\n        const errors = [{ keyword: 'x-languages', params: [], message: ctx.text('Not expected value') }];\n        throw new app.meta.ajv.ValidationError(errors);\n      };\n    },\n  };\n  return keywords;\n};\n"],"sourceRoot":""}