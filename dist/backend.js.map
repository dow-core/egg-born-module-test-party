{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/external \"require3\"","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/party.js","webpack://backend/./backend/src/controller/partyPublic.js","webpack://backend/./backend/src/controller/test/atom/starLabel.js","webpack://backend/./backend/src/controller/test/atom/all.js","webpack://backend/./backend/src/controller/test/atom/publicFlow.js","webpack://backend/./backend/src/controller/test/atom/right.js","webpack://backend/./backend/src/controller/test/function/right.js","webpack://backend/./backend/src/controller/test/function/all.js","webpack://backend/./backend/src/controller/test/function/public.js","webpack://backend/./backend/src/controller/test/ctx/performAction.js","webpack://backend/./backend/src/controller/test/ctx/transaction.js","webpack://backend/./backend/src/controller/test/ctx/tail.js","webpack://backend/./backend/src/controller/test/ctx/session.js","webpack://backend/./backend/src/controller/test/cache/mem.js","webpack://backend/./backend/src/controller/test/cache/db.js","webpack://backend/./backend/src/controller/test/feat/httpLog.js","webpack://backend/./backend/src/controller/test/role/userRole.js","webpack://backend/./backend/src/controller/test/feat/startup.js","webpack://backend/./backend/src/controller/test/feat/sendMail.js","webpack://backend/./backend/src/controller/test/event/hello.js","webpack://backend/./backend/src/controller/test/event/userVerify.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/version/test.js","webpack://backend/./backend/src/service/version/testData.js","webpack://backend/./backend/src/service/party.js","webpack://backend/./backend/src/service/partyPublic.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/model/party.js","webpack://backend/./backend/src/model/partyType.js","webpack://backend/./backend/src/model/partyPublic.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/config/validation/schemas.js"],"names":[],"mappings":"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A;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA,mDAAmD,uBAAuB,kBAAkB,EAAE;AAC9F;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,YAAY,mCAAmC,EAAE;AACnE;AACA,iBAAiB,oBAAoB;AACrC,SAAS;AACT,eAAe,kBAAkB;AACjC,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,2EAA2E;AAC5F,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,4EAA4E;AAC7F,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,0BAA0B;AAC3C,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,OAAO;;AAEP;AACA;AACA;AACA;AACA,iBAAiB,0BAA0B;AAC3C,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC1MA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA,2DAA2D,+BAA+B;AAC1F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,OAAO;AACP;AACA;AACA,eAAe,8BAA8B;AAC7C,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA,mDAAmD,uBAAuB,mBAAmB,EAAE;AAC/F;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC/IA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC3BA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACZA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA,kBAAkB,2BAA2B;AAC7C;AACA,iBAAiB,oBAAoB;AACrC;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,2BAA2B;AAC7C;AACA,iBAAiB,oBAAoB;AACrC;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,2BAA2B;AAC7C;AACA,iBAAiB,oBAAoB;AACrC,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kBAAkB,2BAA2B;AAC7C;AACA,iBAAiB,oBAAoB;AACrC,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kBAAkB,2BAA2B;AAC7C;AACA,iBAAiB,oBAAoB;AACrC,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA,WAAW,iDAAiD;AAC5D;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACvGA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,iBAAiB,oBAAoB;AACrC;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC/CA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC5BA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,mCAAmC;AAClD;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC/BA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC1BA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;;;;;;;AC/CA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACvDA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACvDA;;AAEA;;AAEA;AACA,sBAAsB,WAAW,mBAAmB,YAAY,EAAE,YAAY;AAC9E;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACZA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D,uBAAuB;AACrF;AACA;AACA,0DAA0D,uBAAuB;AACjF;AACA;AACA,0DAA0D,uBAAuB;AACjF;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC9CA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,qBAAqB;AACtE;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACtBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;ACtBA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC/BA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACjBA,gBAAgB,mBAAO,CAAC,EAAsB;AAC9C,cAAc,mBAAO,CAAC,EAAoB;AAC1C,oBAAoB,mBAAO,CAAC,EAA0B;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;ACfA,sBAAsB,mBAAO,CAAC,EAAmB;;AAEjD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACnFA,iBAAiB,mBAAO,CAAC,EAAe;;AAExC;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wDAAwD,WAAW;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,sCAAsC;AACvD,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wDAAwD,gBAAgB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;;;;;;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9CA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA,OAAO;AACP,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qCAAqC,EAAE,kCAAkC;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,6BAA6B;AAC7C;AACA;AACA;;AAEA,kBAAkB,kCAAkC;AACpD;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,6BAA6B;AAC9C;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA,OAAO;AACP;;AAEA,kBAAkB,+BAA+B;AACjD;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA,SAAS;AACT;AACA;;AAEA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,OAAO;AACP;;AAEA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;;;;;;;ACrGA;;AAEA;;AAEA,kBAAkB,6BAA6B;AAC/C;AACA;AACA,OAAO;AACP,cAAc;AACd;;AAEA,iBAAiB,6BAA6B;AAC9C;;AAEA,kBAAkB,uBAAuB;AACzC;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;;;;;;;ACvBA,cAAc,mBAAO,CAAC,EAAkB;AACxC,kBAAkB,mBAAO,CAAC,EAAsB;AAChD,oBAAoB,mBAAO,CAAC,EAAwB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;ACfA;;AAEA;;AAEA;AACA,kBAAkB,+BAA+B,wBAAwB,EAAE;AAC3E;;AAEA;;AAEA;AACA;;;;;;;ACXA;;AAEA;;AAEA;AACA,kBAAkB,mCAAmC,uBAAuB,EAAE;AAC9E;;AAEA;;AAEA;AACA;;;;;;;ACXA;;AAEA;;AAEA;AACA,kBAAkB,qCAAqC,wBAAwB,EAAE;AACjF;;AAEA;;AAEA;AACA;;;;;;;ACXA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,EAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX,SAAS;AACT,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"require3\");","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\n\nmodule.exports = app => {\n\n  // routes\n  const routes = require('./routes.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    meta,\n  };\n\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  if (appInfo.env === 'unittest') {\n    // startups\n    config.startups = {\n      startupAll: {\n        type: 'worker',\n        path: 'test/feat/startup/all',\n      },\n      startupInstance: {\n        type: 'worker',\n        instance: true,\n        path: 'test/feat/startup/instance',\n      },\n    };\n  }\n\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  'Create Party': '新建宴会',\n  'Party List': '宴会列表',\n  Party: '宴会',\n  Review: '评审',\n  Reviewing: '评审中',\n  Reviewed: '已评审',\n  Birthday: '生日',\n  Dance: '跳舞',\n  Garden: '花园',\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","module.exports = {\n};\n","const version = require('./controller/version.js');\nconst party = require('./controller/party.js');\nconst partyPublic = require('./controller/partyPublic.js');\nconst testAtomStarLabel = require('./controller/test/atom/starLabel.js');\nconst testAtomAll = require('./controller/test/atom/all.js');\nconst testAtomPublicFlow = require('./controller/test/atom/publicFlow.js');\nconst testAtomRight = require('./controller/test/atom/right.js');\nconst testFunctionRight = require('./controller/test/function/right.js');\nconst testFunctionAll = require('./controller/test/function/all.js');\nconst testFunctionPublic = require('./controller/test/function/public.js');\nconst testCtxPerformAction = require('./controller/test/ctx/performAction.js');\nconst testCtxTransaction = require('./controller/test/ctx/transaction.js');\nconst testCtxTail = require('./controller/test/ctx/tail.js');\nconst testCtxSession = require('./controller/test/ctx/session.js');\nconst testCacheMem = require('./controller/test/cache/mem.js');\nconst testCacheDb = require('./controller/test/cache/db.js');\nconst testFeatHttpLog = require('./controller/test/feat/httpLog.js');\nconst testRoleUserRole = require('./controller/test/role/userRole.js');\nconst testFeatStartup = require('./controller/test/feat/startup.js');\nconst testFeatSendMail = require('./controller/test/feat/sendMail.js');\nconst testEventHello = require('./controller/test/event/hello.js');\nconst testEventUserVerify = require('./controller/test/event/userVerify.js');\n\nmodule.exports = app => {\n  let routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/test', controller: version, middlewares: 'test' },\n  ];\n  if (app.meta.isTest || app.meta.isLocal) {\n    routes = routes.concat([\n      // atom: party\n      { method: 'post', path: 'party/create', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/read', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/select', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/write', controller: party, middlewares: 'inner,validate',\n        meta: {\n          auth: { enable: false },\n          validate: { validator: 'party', data: 'item' },\n        },\n      },\n      { method: 'post', path: 'party/delete', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/action', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/enable', controller: party, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'party/types', controller: party },\n\n      // atom: partyPublic (only for test)\n      { method: 'post', path: 'partyPublic/create', controller: partyPublic, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/write', controller: partyPublic, middlewares: 'inner', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'partyPublic/delete', controller: partyPublic, middlewares: 'inner', meta: { auth: { enable: false } } },\n\n      // test/atom/starLabel\n      { method: 'post', path: 'test/atom/starLabel', controller: testAtomStarLabel, middlewares: 'test' },\n      // test/atom/all\n      { method: 'post', path: 'test/atom/all', controller: testAtomAll, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/atom/publicFlow\n      { method: 'post', path: 'test/atom/publicFlow', controller: testAtomPublicFlow, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/atom/right(checked by middleware)\n      { method: 'post', path: 'test/atom/checkRightCreate', controller: testAtomRight, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 1 } },\n      },\n      { method: 'post', path: 'test/atom/checkRightRead', controller: testAtomRight, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 2 } },\n      },\n      { method: 'post', path: 'test/atom/checkRightWrite', controller: testAtomRight, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 3 } },\n      },\n      { method: 'post', path: 'test/atom/checkRightAction', controller: testAtomRight, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 101 } },\n      },\n\n      // test/function/right\n      { method: 'post', path: 'test/function/checkRightFunctionUser', controller: testFunctionRight, middlewares: 'test',\n        meta: { right: { type: 'function', module: 'a-baseadmin', name: 'user' } },\n      },\n      // test/function/all\n      { method: 'post', path: 'test/function/all', controller: testFunctionAll, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test/function/public\n      { method: 'post', path: 'test/function/functionPublic', controller: testFunctionPublic, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/role/userRole\n      { method: 'post', path: 'test/role/userRole', controller: testRoleUserRole, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/ctx/performAction\n      { method: 'post', path: 'test/ctx/performAction', controller: testCtxPerformAction, middlewares: 'test' },\n      { method: 'post', path: 'test/ctx/performAction/echo', controller: testCtxPerformAction, middlewares: 'test' },\n      // test/ctx/transaction\n      { method: 'post', path: 'test/ctx/transaction', controller: testCtxTransaction, middlewares: 'test,transaction' },\n      // test/ctx/tail\n      { method: 'post', path: 'test/ctx/tail', controller: testCtxTail, middlewares: 'test' },\n      // test/ctx/session\n      { method: 'post', path: 'test/ctx/session', controller: testCtxSession, middlewares: 'test' },\n      { method: 'post', path: 'test/ctx/session/echo1', controller: testCtxSession, middlewares: 'test' },\n      { method: 'post', path: 'test/ctx/session/echo2', controller: testCtxSession, middlewares: 'test' },\n\n      // test/feat/httpLog\n      { method: 'post', path: 'test/cache/mem', controller: testCacheMem, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/cache/db', controller: testCacheDb, middlewares: 'test', meta: { auth: { enable: false } } },\n\n      // test/feat/httpLog\n      { method: 'post', path: 'test/feat/httpLog', controller: testFeatHttpLog, middlewares: 'test,httpLog', meta: { auth: { enable: false } } },\n\n      // test/feat/startup\n      { method: 'post', path: 'test/feat/startup/all', controller: testFeatStartup, middlewares: 'inner', meta: { instance: { enable: false } } },\n      { method: 'post', path: 'test/feat/startup/instance', controller: testFeatStartup, middlewares: 'inner', meta: { auth: { enable: false } } },\n\n      // test/feat/sendMail\n      { method: 'post', path: 'test/feat/sendMail', controller: testFeatSendMail, middlewares: 'test,mail', meta: { auth: { enable: false } } },\n\n      // test/event/hello\n      { method: 'post', path: 'test/event/hello', controller: testEventHello, middlewares: 'test', meta: { auth: { enable: false } } },\n      { method: 'post', path: 'test/event/helloEcho', controller: testEventHello, middlewares: 'test,inner', meta: { auth: { enable: false } } },\n      // test/event/userVerify\n      { method: 'post', path: 'test/event/userVerify', controller: testEventUserVerify, middlewares: 'test', meta: { auth: { enable: false } } },\n    ]);\n  }\n  return routes;\n};\n","module.exports = app => {\n\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async test() {\n      await this.service.version.test(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n\n  return VersionController;\n};\n","module.exports = app => {\n\n  class PartyController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.party.create(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async read() {\n      const res = await this.ctx.service.party.read(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async select() {\n      const res = await this.ctx.service.party.select(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async write() {\n      await this.ctx.service.party.write(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.party.delete(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async action() {\n      const res = await this.ctx.service.party.action(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async enable() {\n      const res = await this.ctx.service.party.enable(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async types() {\n      const res = await this.ctx.service.party.types(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n  }\n\n  return PartyController;\n};\n\n","module.exports = app => {\n\n  class PartyPublicController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.partyPublic.create(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async write() {\n      await this.ctx.service.partyPublic.write(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.partyPublic.delete(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n\n  return PartyPublicController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class StarLabelController extends app.Controller {\n\n    async starLabel() {\n      // atomClass\n      const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'party' });\n      // user\n      const user = this.ctx.user.op;\n\n      // add party:star\n      const partyKey = await this.ctx.meta.atom.create({\n        atomClass,\n        user,\n      });\n\n      // write party\n      await this.ctx.meta.atom.write({\n        key: partyKey,\n        item: { atomName: 'test:starLabel' },\n        user,\n      });\n\n      // get party\n      let party = await this.ctx.meta.atom.read({ key: partyKey, user });\n      assert.equal(party.star, null);\n      assert.equal(party.labels, null);\n\n      // set star/label\n      await this.ctx.meta.atom.star({ key: partyKey, atom: { star: 1 }, user });\n      await this.ctx.meta.atom.labels({ key: partyKey, atom: { labels: [ 1 ] }, user });\n\n      // get party\n      party = await this.ctx.meta.atom.read({ key: partyKey, user });\n      assert.equal(party.star, 1);\n      assert.equal(party.labels, '[1]');\n\n      // select parties\n      let parties = await this.ctx.meta.atom.select({\n        user,\n        options: {\n          star: 1,\n          where: { atomName: 'test:starLabel' },\n        },\n      });\n      assert.equal(parties.length, 1);\n\n      parties = await this.ctx.meta.atom.select({\n        user,\n        options: {\n          label: 1,\n          where: { atomName: 'test:starLabel' },\n        },\n      });\n      assert.equal(parties.length, 1);\n\n      parties = await this.ctx.meta.atom.select({\n        user,\n        options: {\n          label: 2,\n          where: { atomName: 'test:starLabel' },\n        },\n      });\n      assert.equal(parties.length, 0);\n\n      // clear star/label\n      await this.ctx.meta.atom.star({ key: partyKey, atom: { star: 0 }, user });\n      await this.ctx.meta.atom.labels({ key: partyKey, atom: { labels: null }, user });\n\n      // get party\n      party = await this.ctx.meta.atom.read({ key: partyKey, user });\n      assert.equal(party.star, null);\n      assert.equal(party.labels, null);\n\n      // delete party\n      await this.ctx.meta.atom.delete({ key: partyKey, user });\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return StarLabelController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class AllController extends app.Controller {\n\n    async all() {\n      // atomClass\n      const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'party' });\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n\n      // user->atom\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom add party\n      const partyKey = await this.ctx.meta.atom.create({\n        atomClass,\n        user: { id: userIds.Tom },\n      });\n      await this.ctx.meta.atom.write({\n        key: partyKey,\n        item: { atomName: 'test:all', personCount: 3 },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom enable(submit) party\n      await this.ctx.meta.atom.enable({\n        key: partyKey,\n        atom: {\n          atomEnabled: 1,\n        },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 1 ],\n        [ 'Jimmy', 1 ],\n        [ 'Smith', 1 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom update party\n      await this.ctx.meta.atom.write({\n        key: partyKey,\n        item: { personCount: 8 },\n        user: { id: userIds.Tom },\n      });\n\n      // Tom get party\n      const party = await this.ctx.meta.atom.read({ key: partyKey, user: { id: userIds.Tom } });\n      assert.equal(party.personCount, 8);\n\n      // Tom list party\n      const parties = await this.ctx.meta.atom.select({\n        atomClass,\n        options: {\n          where: { atomName: { val: 'test:all', op: 'likeRight' } },\n          orders: [[ 'a.createdAt', 'desc' ]],\n          page: { index: 0, size: 0 },\n        },\n        user: { id: userIds.Tom },\n      });\n      assert.equal(parties.length, 1);\n\n      // checkRightRead\n      const checkRightReads = [[ 'Tom', partyKey.atomId, true ]];\n      for (const [ userName, atomId, right ] of checkRightReads) {\n        const res = await this.ctx.meta.atom.checkRightRead({\n          atom: { id: atomId },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightWrite\n      const checkRightWrites = [[ 'Tom', partyKey.atomId, true ], [ 'Tomson', partyKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightWrites) {\n        const res = await this.ctx.meta.atom.checkRightUpdate({\n          atom: { id: atomId, action: this.ctx.constant.module('a-base').atom.action.write },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightDelete\n      const checkRightDeletes = [[ 'Tom', partyKey.atomId, true ], [ 'Tomson', partyKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightDeletes) {\n        const res = await this.ctx.meta.atom.checkRightUpdate({\n          atom: { id: atomId, action: this.ctx.constant.module('a-base').atom.action.delete },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightCreate\n      const checkRightCreates = [[ 'Tom', true ], [ 'Jimmy', true ], [ 'Smith', false ]];\n      for (const [ userName, right ] of checkRightCreates) {\n        const res = await this.ctx.meta.atom.checkRightCreate({\n          atomClass,\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // checkRightAction:review(flag=1)\n      const checkRightActions_1 = [[ 'Tom', partyKey.atomId, false ], [ 'Jane', partyKey.atomId, true ]];\n      for (const [ userName, atomId, right ] of checkRightActions_1) {\n        const res = await this.ctx.meta.atom.checkRightAction({\n          atom: { id: atomId, action: 101 },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // action: review\n      await this.ctx.meta.atom.action({\n        action: 101,\n        key: partyKey,\n        user: { id: userIds.Jane },\n      });\n\n      // checkRightAction:review(flag=2)\n      const checkRightActions_2 = [[ 'Tom', partyKey.atomId, false ], [ 'Jane', partyKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightActions_2) {\n        const res = await this.ctx.meta.atom.checkRightAction({\n          atom: { id: atomId, action: 101 },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // action: review again\n      try {\n        await this.ctx.meta.atom.action({\n          action: 101,\n          key: partyKey,\n          user: { id: userIds.Jane },\n        });\n      } catch (e) {\n        assert.equal(e.code, 405);\n      }\n\n      // Tom delete party\n      await this.ctx.meta.atom.delete({\n        key: partyKey,\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // done\n      this.ctx.success();\n    }\n\n    async _testCheckList(userIds, userAtoms, cb) {\n      for (const [ userName, atomCountExpected ] of userAtoms) {\n        const list = await this.ctx.meta.atom.select({\n          options: {\n            where: {\n              atomName: 'test:all',\n              'b.module': 'test-party',\n            },\n            orders: null,\n            page: null,\n          },\n          user: { id: userIds[userName] },\n        });\n        // callback\n        cb(list.length, atomCountExpected, userName);\n      }\n    }\n\n  }\n\n  return AllController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class PublicFlowController extends app.Controller {\n\n    async publicFlow() {\n      // atomClass\n      const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'partyPublic' });\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n\n      // user->atom\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom add party\n      const partyKey = await this.ctx.meta.atom.create({\n        atomClass,\n        user: { id: userIds.Tom },\n      });\n      await this.ctx.meta.atom.write({\n        key: partyKey,\n        item: { atomName: 'test:publicFlow' },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // Tom enable(submit) party\n      await this.ctx.meta.atom.enable({\n        key: partyKey,\n        atom: {\n          atomEnabled: 1,\n        },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // checkRightRead 1\n      let checkRightReads = [[ 'Jane', partyKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightReads) {\n        const res = await this.ctx.meta.atom.checkRightRead({\n          atom: { id: atomId },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // close atomFlow\n      await this.ctx.meta.atom.flow({\n        key: partyKey,\n        atom: {\n          atomFlow: 0,\n        },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 1 ],\n        [ 'Jimmy', 1 ],\n        [ 'Smith', 1 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // checkRightRead 2\n      checkRightReads = [[ 'Jane', partyKey.atomId, true ]];\n      for (const [ userName, atomId, right ] of checkRightReads) {\n        const res = await this.ctx.meta.atom.checkRightRead({\n          atom: { id: atomId },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(!!res, right, userName);\n      }\n\n      // Jane read party\n      const party = await this.ctx.meta.atom.read({ key: partyKey, user: { id: userIds.Jane } });\n      assert(party);\n\n      // Tom delete party\n      await this.ctx.meta.atom.delete({\n        key: partyKey,\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ], (actual, expected, userName) => {\n        assert.equal(actual, expected, userName);\n      });\n\n      // done\n      this.ctx.success();\n    }\n\n    async _testCheckList(userIds, userAtoms, cb) {\n      for (const [ userName, atomCountExpected ] of userAtoms) {\n        const list = await this.ctx.meta.atom.select({\n          options: {\n            where: {\n              atomName: 'test:publicFlow',\n              'b.module': 'test-party',\n            },\n            orders: null,\n            page: null,\n          },\n          user: { id: userIds[userName] },\n        });\n        // callback\n        cb(list.length, atomCountExpected, userName);\n      }\n    }\n\n  }\n\n  return PublicFlowController;\n};\n\n","module.exports = app => {\n\n  class RightController extends app.Controller {\n\n    async checkRightCreate() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atomClass);\n    }\n\n    async checkRightRead() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atom);\n    }\n\n    async checkRightWrite() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atom);\n    }\n\n    async checkRightAction() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._atom);\n    }\n\n  }\n\n  return RightController;\n};\n\n","module.exports = app => {\n\n  class RightController extends app.Controller {\n\n    async checkRightFunctionUser() {\n      // checked by route/middleware\n      this.ctx.success(this.ctx.meta._function);\n    }\n\n  }\n\n  return RightController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class AllController extends app.Controller {\n\n    async all() {\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      const userTom = { id: userIds.Tom };\n\n      // Tom list all\n      let list = await this.ctx.meta.function.list({\n        options: {\n          where: { 'a.module': 'test-party' },\n          orders: [[ 'id', 'asc' ]],\n          page: { index: 0, size: 0 },\n          locale: '',\n        },\n        user: userTom,\n      });\n      assert.equal(list.length, 2);\n      assert(!list[0].titleLocale);\n\n      // Tom menu list zh-cn\n      list = await this.ctx.meta.function.list({\n        options: {\n          where: { 'a.module': 'test-party' },\n          orders: [[ 'id', 'asc' ]],\n          page: { index: 0, size: 0 },\n          locale: 'zh-cn',\n        },\n        user: userTom,\n      });\n      assert.equal(list.length, 2);\n      assert.notEqual(list[0].title, list[0].titleLocale);\n\n      // hold first\n      const function1 = list[0];\n\n      // clear locales\n      await this.ctx.meta.function.clearLocales();\n\n      // select star\n      list = await this.ctx.meta.function.list({\n        user: userTom,\n        options: {\n          where: { 'a.module': 'test-party' },\n          star: 1,\n          page: { index: 0, size: 0 },\n        },\n      });\n      assert.equal(list.length, 0);\n\n      // star 1\n      await this.ctx.meta.function.star({\n        id: function1.id,\n        star: 1,\n        user: userTom,\n      });\n      list = await this.ctx.meta.function.list({\n        user: userTom,\n        options: {\n          where: { 'a.module': 'test-party' },\n          star: 1,\n          page: { index: 0, size: 0 },\n        },\n      });\n      assert.equal(list.length, 1);\n\n      // star 0\n      await this.ctx.meta.function.star({\n        id: function1.id,\n        star: 0,\n        user: userTom,\n      });\n      list = await this.ctx.meta.function.list({\n        user: userTom,\n        options: {\n          where: { 'a.module': 'test-party' },\n          star: 1,\n          page: { index: 0, size: 0 },\n        },\n      });\n      assert.equal(list.length, 0);\n\n      // check\n      list = await this.ctx.meta.function.check({\n        functions: [\n          { module: function1.module, name: function1.name },\n        ],\n        user: userTom,\n      });\n      assert.equal(list[0].passed, true);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return AllController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class PublicController extends app.Controller {\n\n    async functionPublic() {\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      const userTom = { id: userIds.Tom };\n\n      // check right function\n      const pass = await this.ctx.meta.function.checkRightFunction({\n        function: {\n          module: 'test-party',\n          name: 'testFunctionPublic',\n        },\n        user: userTom,\n      });\n      assert.equal(!!pass, true);\n\n      // Tom list all\n      const list = await this.ctx.meta.function.list({\n        options: {\n          where: {\n            'a.module': 'test-party',\n            'a.public': 1,\n          },\n          orders: [[ 'id', 'asc' ]],\n          page: { index: 0, size: 0 },\n          locale: '',\n        },\n        user: userTom,\n      });\n      assert.equal(list.length, 1);\n\n      // delete function\n      await this.ctx.model.query('delete from aFunction where id=?', [ list[0].id ]);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return PublicController;\n};\n\n","module.exports = app => {\n\n  class PerformActionController extends app.Controller {\n\n    async performAction() {\n      // param: id\n      const id = this.ctx.request.body.id;\n      // performAction\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'test/ctx/performAction/echo',\n        body: {\n          id,\n        },\n      });\n      this.ctx.success(res);\n    }\n\n    async echo() {\n      // body: id\n      const id = this.ctx.request.body.id;\n      // echo back\n      this.ctx.success(id);\n    }\n\n  }\n\n  return PerformActionController;\n};\n\n","module.exports = app => {\n\n  class TransactionController extends app.Controller {\n\n    async transaction() {\n      // user\n      const user = this.ctx.user.op;\n      // atomKey\n      const atomKey = this.ctx.request.body.key;\n      // itemNew\n      const itemNew = this.ctx.request.body.item;\n\n      // write\n      await this.ctx.meta.atom.write({\n        key: atomKey,\n        item: { atomName: itemNew.atomName },\n        user,\n      });\n      // write: throw error when personCount is 0\n      await this.ctx.meta.atom.write({\n        key: atomKey,\n        item: { personCount: itemNew.personCount },\n        user,\n      });\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return TransactionController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class TailController extends app.Controller {\n\n    async tail() {\n      // 1\n      this.ctx.meta._cache = 1;\n\n      // tail\n      this.ctx.tail(() => {\n        assert.equal(this.ctx.meta._cache, 2);\n      });\n\n      // 2\n      this.ctx.meta._cache = 2;\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return TailController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class SessionController extends app.Controller {\n\n    async session() {\n      // key1\n      this.ctx.session._key1 = 1;\n      // echo1\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'test/ctx/session/echo1',\n      });\n      assert.equal(res.user.op.id, this.ctx.user.op.id);\n      assert.equal(res.instance.id, this.ctx.instance.id);\n      assert.equal(this.ctx.session._key2, 2);\n      // done\n      this.ctx.success();\n    }\n\n    async echo1() {\n      // echo2\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: 'test/ctx/session/echo2',\n      });\n      // echo back\n      this.ctx.success(res);\n    }\n\n    async echo2() {\n      // check\n      assert.equal(this.ctx.session._key1, 1);\n      // key2\n      this.ctx.session._key2 = 2;\n      // echo back\n      this.ctx.success({\n        user: this.ctx.user,\n        instance: this.ctx.instance,\n      });\n    }\n\n  }\n\n  return SessionController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class MemController extends app.Controller {\n\n    async mem() {\n\n      // set\n      this.ctx.cache.mem.set('name', 'zhennann');\n\n      // has\n      let res = this.ctx.cache.mem.has('name');\n      assert(res);\n\n      // get\n      let value = this.ctx.cache.mem.get('name');\n      assert(value === 'zhennann');\n\n      // remove\n      this.ctx.cache.mem.remove('name');\n      res = this.ctx.cache.mem.has('name');\n      assert(!res);\n\n      // set with timeout\n      this.ctx.cache.mem.set('name', 'zhennann', 1000);\n\n      // get\n      value = this.ctx.cache.mem.get('name');\n      assert(value === 'zhennann');\n\n      // other module's cache\n      const moduleCache = this.ctx.cache.mem.module(this.ctx.module.info.relativeName);\n      value = moduleCache.get('name');\n      assert(value === 'zhennann');\n\n      // get after timeout\n      await sleep(1000);\n      value = this.ctx.cache.mem.get('name');\n      assert(!value);\n\n      // clear\n      //   not clear, hold other caches\n      // this.ctx.cache.mem.clear();\n\n      this.ctx.success();\n    }\n\n  }\n  return MemController;\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class DbController extends app.Controller {\n\n    async db() {\n\n      // set\n      await this.ctx.cache.db.set('name', 'zhennann');\n\n      // has\n      let res = await this.ctx.cache.db.has('name');\n      assert(res);\n\n      // get\n      let value = await this.ctx.cache.db.get('name');\n      assert(value === 'zhennann');\n\n      // remove\n      await this.ctx.cache.db.remove('name');\n      res = await this.ctx.cache.db.has('name');\n      assert(!res);\n\n      // set with timeout\n      await this.ctx.cache.db.set('name', 'zhennann', 1000);\n\n      // get\n      value = await this.ctx.cache.db.get('name');\n      assert(value === 'zhennann');\n\n      // other module's cache\n      const moduleCache = this.ctx.cache.db.module(this.ctx.module.info.relativeName);\n      value = await moduleCache.get('name');\n      assert(value === 'zhennann');\n\n      // get after timeout\n      await sleep(1000);\n      value = await this.ctx.cache.db.get('name');\n      assert(!value);\n\n      // clear\n      //   not clear, hold other caches\n      // await this.ctx.cache.db.clear();\n\n      this.ctx.success();\n    }\n\n  }\n  return DbController;\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","module.exports = app => {\n\n  class HttpLogController extends app.Controller {\n\n    async httpLog() {\n      // please see: {projectDir}/src/backend/logs/{projectName}/{projectName}-web.log\n      this.ctx.success('this is a test for httpLog');\n    }\n\n  }\n\n  return HttpLogController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class UserRoleController extends app.Controller {\n\n    async userRole() {\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      // roleIds\n      const roleIds = this.ctx.cache.mem.get('roleIds');\n\n      // direct\n      let list = await this.ctx.meta.role.getUserRolesDirect({ userId: userIds.root });\n      assert.equal(list.length, 1);\n      // parent\n      list = await this.ctx.meta.role.getUserRolesParent({ userId: userIds.root });\n      assert.equal(list.length, 3);\n      // expand\n      list = await this.ctx.meta.role.getUserRolesExpand({ userId: userIds.root });\n      assert(list.length > 3);\n\n      // direct\n      let res = await this.ctx.meta.role.userInRoleDirect({\n        userId: userIds.root, roleId: roleIds.superuser,\n      });\n      assert.equal(res, true);\n      // parent\n      res = await this.ctx.meta.role.userInRoleParent({\n        userId: userIds.root, roleId: roleIds.root,\n      });\n      assert.equal(res, true);\n      // expand\n      res = await this.ctx.meta.role.userInRoleExpand({\n        userId: userIds.root, roleId: roleIds.system,\n      });\n      assert.equal(res, true);\n\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return UserRoleController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class StartupController extends app.Controller {\n\n    async all() {\n      console.log('test/feat/startup: all');\n      assert.equal(this.ctx.instance, undefined);\n      this.ctx.success();\n    }\n\n    async instance() {\n      console.log(`test/feat/startup: instance:${this.ctx.instance.id}`);\n      assert(this.ctx.instance.id > 0);\n      this.ctx.success();\n    }\n\n  }\n\n  return StartupController;\n};\n","module.exports = app => {\n\n  class SendMailController extends app.Controller {\n\n    async sendMail() {\n      // send\n      await this.ctx.meta.mail.send({\n        scene: 'test',\n        message: {\n          to: 'test@cabloy.com',\n          subject: 'this is a test',\n          text: 'message body!',\n        },\n      });\n      // done\n      this.ctx.success();\n    }\n\n  }\n\n  return SendMailController;\n\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n\n  class HelloController extends app.Controller {\n\n    async hello() {\n      const data = {\n        text: 'hello',\n      };\n      const res = await this.ctx.meta.event.invoke({\n        module: moduleInfo.relativeName, name: 'hello', data,\n      });\n      assert.equal(data.text, 'hello echo');\n      assert.equal(res, 'returnValue');\n      this.ctx.success(res);\n    }\n\n    async helloEcho() {\n      const event = this.ctx.request.body.event;\n      const data = this.ctx.request.body.data;\n      data.text = 'hello echo';\n      event.break = true;\n      this.ctx.success('returnValue');\n    }\n\n  }\n\n  return HelloController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class UserVerifyController extends app.Controller {\n\n    async userVerify() {\n      const data = this.ctx.request.body.data;\n      // console.log('onUserVerify profileId: ', data.profileUser.profileId);\n      assert(data.profileUser.profileId > 0);\n      this.ctx.success();\n    }\n\n  }\n\n  return UserVerifyController;\n};\n\n","const version = require('./service/version.js');\nconst party = require('./service/party.js');\nconst partyPublic = require('./service/partyPublic.js');\n\nmodule.exports = app => {\n  const services = {\n    version,\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    Object.assign(services, {\n      party,\n      partyPublic,\n    });\n  }\n  return services;\n};\n","const VersionTestFn = require('./version/test.js');\n\nmodule.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n      // only in test/local\n      if (!this.app.meta.isTest && !this.app.meta.isLocal) return;\n\n      // update\n      if (options.version === 1) {\n        let sql = `\n          CREATE TABLE testParty (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            personCount int(11) DEFAULT '0',\n            partyTypeId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE TABLE testPartyType (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            name varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE VIEW testPartyView as\n            select a.*,b.name as partyTypeName from testParty a\n              left join testPartyType b on a.partyTypeId=b.id\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE TABLE testPartyPublic (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {\n      // only in test/local\n      if (!this.app.meta.isTest && !this.app.meta.isLocal) return;\n\n      // init\n      if (options.version === 1) {\n        // types\n        for (const name of [ 'Birthday', 'Dance', 'Garden' ]) {\n          await this.ctx.model.partyType.insert({ name });\n        }\n      }\n    }\n\n    async test() {\n      const versionTest = new (VersionTestFn(this.ctx))();\n      await versionTest.run();\n    }\n\n  }\n\n  return Version;\n};\n","const testData = require('./testData.js');\n\nmodule.exports = function(ctx) {\n\n  class VersionTest {\n\n    async run() {\n\n      // roles\n      const roleIds = await this._testRoles();\n\n      // role includes\n      await this._testRoleIncs(roleIds);\n\n      // set role dirty\n      await ctx.meta.role.setDirty(true);\n\n      // users\n      const userIds = await this._testUsers(roleIds);\n\n      // role rights\n      await this._testRoleRights(roleIds);\n\n      // cache\n      this._testCache(roleIds, userIds);\n    }\n\n    _testCache(roleIds, userIds) {\n      // cache roles\n      ctx.cache.mem.set('roleIds', roleIds);\n      // cache users\n      ctx.cache.mem.set('userIds', userIds);\n    }\n\n    // roles\n    async _testRoles() {\n      const roleIds = {};\n      // system roles\n      for (const roleName of ctx.constant.module('a-base').systemRoles) {\n        const role = await ctx.meta.role.getSystemRole({ roleName });\n        roleIds[roleName] = role.id;\n      }\n      // roles\n      for (const [ roleName, leader, catalog, roleNameParent ] of testData.roles) {\n        roleIds[roleName] = await ctx.meta.role.add({\n          roleName,\n          leader,\n          catalog,\n          roleIdParent: roleIds[roleNameParent],\n        });\n      }\n\n      return roleIds;\n    }\n\n    // role incs\n    async _testRoleIncs(roleIds) {\n      for (const [ roleId, roleIdInc ] of testData.roleIncs) {\n        await ctx.meta.role.addRoleInc({\n          roleId: roleIds[roleId],\n          roleIdInc: roleIds[roleIdInc],\n        });\n      }\n    }\n\n    // users\n    async _testUsers(roleIds) {\n      // userIds\n      const userIds = {};\n      for (const [ userName, roleName ] of testData.users) {\n        // add\n        userIds[userName] = await ctx.meta.user.add({\n          userName,\n          realName: userName,\n        });\n        // activated\n        await ctx.meta.user.save({\n          user: { id: userIds[userName], activated: 1 },\n        });\n        // role\n        await ctx.meta.role.addUserRole({\n          userId: userIds[userName],\n          roleId: roleIds[roleName],\n        });\n      }\n\n      // auths\n      await this._testAuths(userIds);\n\n      // root\n      const userRoot = await ctx.meta.user.get({ userName: 'root' });\n      userIds.root = userRoot.id;\n      return userIds;\n    }\n\n    // role rights\n    async _testRoleRights(roleIds) {\n      const module = ctx.app.meta.modules[ctx.module.info.relativeName];\n      for (const [ roleName, atomClassName, actionName, scopeNames ] of testData.roleRights) {\n        const atomClass = await ctx.meta.atomClass.get({ atomClassName });\n        await ctx.meta.role.addRoleRight({\n          roleId: roleIds[roleName],\n          atomClassId: atomClass.id,\n          action: ctx.constant.module('a-base').atom.action[actionName] || module.main.meta.base.atoms[atomClassName]\n            .actions[actionName].code,\n          scope: scopeNames ? scopeNames.split(',').map(scopeName => roleIds[scopeName]) : 0,\n        });\n      }\n    }\n\n    // auths\n    async _testAuths(userIds) {\n      for (const userName in userIds) {\n        await ctx.performAction({\n          method: 'post',\n          url: '/a/authsimple/auth/add',\n          body: {\n            userId: userIds[userName],\n            password: '',\n          },\n        });\n      }\n    }\n\n  }\n\n  return VersionTest;\n};\n","// roleName, leader, catalog, roleNameParent\nconst roles = [\n  [ 'friend', 0, 0, 'external' ],\n  [ 'consultant', 0, 1, 'external' ],\n  [ 'study', 0, 0, 'consultant' ],\n  [ 'work', 0, 0, 'consultant' ],\n  [ 'life', 0, 0, 'consultant' ],\n  [ 'family', 0, 1, 'internal' ],\n  [ 'father', 0, 0, 'family' ],\n  [ 'mother', 1, 0, 'family' ],\n  [ 'son', 0, 0, 'family' ],\n  [ 'daughter', 0, 0, 'family' ],\n];\n\n// friend->family\nconst roleIncs = [\n  [ 'friend', 'family' ],\n];\n\n// family and friend\n//   userName, roleName\nconst users = [\n  [ 'Tom', 'father' ], [ 'Jane', 'mother' ], [ 'Tomson', 'son' ], [ 'Jannie', 'daughter' ],\n  [ 'Jimmy', 'friend' ], [ 'Rose', 'friend' ],\n  [ 'Smith', 'life' ],\n];\n\n// roleRights\nconst roleRights = [\n  [ 'system', 'party', 'create' ],\n  [ 'system', 'party', 'read', 'family' ],\n  [ 'system', 'party', 'review', 'family' ],\n  [ 'system', 'party', 'review', 'authenticated' ],\n  [ 'family', 'party', 'create' ],\n  [ 'family', 'party', 'read', 'family' ],\n  [ 'mother', 'party', 'review', 'family' ],\n  [ 'authenticated', 'party', 'write', 0 ],\n  [ 'authenticated', 'party', 'delete', 0 ],\n  [ 'consultant', 'party', 'read', 'family' ],\n];\n\nmodule.exports = {\n  roles,\n  roleIncs,\n  users,\n  roleRights,\n};\n","module.exports = app => {\n\n  const gPartyTypeEmojis = {\n    Birthday: '🎂',\n    Dance: '💃',\n    Garden: '🏡',\n  };\n\n  class Party extends app.Service {\n\n    async create({ atomClass, key, item, user }) {\n      // add party\n      const res = await this.ctx.model.party.insert({\n        atomId: key.atomId,\n      });\n      return { atomId: key.atomId, itemId: res.insertId };\n    }\n\n    _getMeta(item) {\n      // flags\n      const flags = [];\n      if (item.personCount) {\n        flags.push(item.personCount);\n      }\n      // summary\n      let summary;\n      if (item.partyTypeName) {\n        summary = `${gPartyTypeEmojis[item.partyTypeName]}${this.ctx.text(item.partyTypeName)}`;\n      }\n      // meta\n      const meta = {\n        flags,\n        summary,\n      };\n      // ok\n      item._meta = meta;\n    }\n\n    async read({ atomClass, key, item, user }) {\n      // read\n      this._getMeta(item);\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // select\n      for (const item of items) {\n        this._getMeta(item);\n      }\n    }\n\n    async write({ atomClass, key, item, user }) {\n      // update party\n      await this.ctx.model.party.update({\n        id: key.itemId,\n        personCount: item.personCount,\n        partyTypeId: item.partyTypeId,\n      });\n    }\n\n    async delete({ atomClass, key, user }) {\n      // delete party\n      await this.ctx.model.party.delete({\n        id: key.itemId,\n      });\n    }\n\n    async action({ action, atomClass, key, user }) {\n      if (action === 101) {\n        // change flag\n        await this.ctx.meta.atom.flag({\n          key,\n          atom: { atomFlag: 2 },\n          user,\n        });\n      }\n    }\n\n    async enable({ atomClass, key, atom, user }) {\n      // enable\n      const atomFlag = atom.atomEnabled ? 1 : 0;\n      // change flag\n      await this.ctx.meta.atom.flag({\n        key,\n        atom: { atomFlag },\n        user,\n      });\n    }\n\n    async types({ empty }) {\n      const items = await this.ctx.model.partyType.select();\n      return items.map(item => {\n        return {\n          id: item.id,\n          name: this.ctx.text(item.name),\n        };\n      });\n    }\n\n  }\n\n  return Party;\n};\n","module.exports = app => {\n\n  class PartyPublic extends app.Service {\n\n    async create({ atomClass, key, item, user }) {\n      const res = await this.ctx.model.partyPublic.insert({\n        atomId: key.atomId,\n      });\n      return { atomId: key.atomId, itemId: res.insertId };\n    }\n\n    async write({ atomClass, key, item, user }) {\n    }\n\n    async delete({ atomClass, key, user }) {\n      await this.ctx.model.partyPublic.delete({\n        id: key.itemId,\n      });\n    }\n\n  }\n\n  return PartyPublic;\n};\n","const party = require('./model/party.js');\nconst partyType = require('./model/partyType.js');\nconst partyPublic = require('./model/partyPublic.js');\n\nmodule.exports = app => {\n  const models = {\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    Object.assign(models, {\n      party,\n      partyType,\n      partyPublic,\n    });\n  }\n  return models;\n};\n","module.exports = app => {\n\n  class Party extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testParty', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return Party;\n};\n","module.exports = app => {\n\n  class PartyType extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testPartyType', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return PartyType;\n};\n","module.exports = app => {\n\n  class PartyPublic extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testPartyPublic', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return PartyPublic;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nmodule.exports = app => {\n  const meta = {\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    // schemas\n    const schemas = require('./config/validation/schemas.js')(app);\n    // meta\n    extend(true, meta, {\n      base: {\n        atoms: {\n          party: {\n            info: {\n              title: 'Party',\n              tableName: 'testPartyView',\n              flow: 0,\n            },\n            actions: {\n              review: {\n                code: 101,\n                title: 'Review',\n                flag: '1',\n              },\n            },\n            flags: {\n              1: {\n                title: 'Reviewing',\n              },\n              2: {\n                title: 'Reviewed',\n              },\n            },\n            validator: 'party',\n            search: {\n              validator: 'partySearch',\n            },\n          },\n        },\n        functions: {\n          createParty: {\n            title: 'Create Party',\n            scene: 'create',\n            autoRight: 1,\n            atomClassName: 'party',\n            action: 'create',\n            sorting: 1,\n            menu: 1,\n          },\n          listParty: {\n            title: 'Party List',\n            scene: 'list',\n            autoRight: 1,\n            atomClassName: 'party',\n            action: 'read',\n            sorting: 1,\n            menu: 1,\n          },\n        },\n      },\n      validation: {\n        validators: {\n          party: {\n            schemas: 'party',\n          },\n          partySearch: {\n            schemas: 'partySearch',\n          },\n        },\n        keywords: {},\n        schemas: {\n          party: schemas.party,\n          partySearch: schemas.partySearch,\n        },\n      },\n    });\n  }\n  if (app.meta.isTest) {\n    // meta\n    extend(true, meta, {\n      base: {\n        atoms: {\n          partyPublic: {\n            info: {\n              tableName: 'testPartyPublic',\n              public: 1,\n              flow: 1,\n            },\n          },\n        },\n        functions: {\n          testFunctionPublic: {\n            scene: 'tools',\n            menu: 1,\n            public: 1,\n          },\n        },\n      },\n      event: {\n        declarations: {\n          hello: 'This is a test for event',\n        },\n        implementations: {\n          'test-party:hello': 'test/event/helloEcho',\n          'a-base:userVerify': 'test/event/userVerify',\n        },\n      },\n    });\n  }\n  return meta;\n};\n","module.exports = app => {\n  const schemas = {};\n  // party\n  schemas.party = {\n    type: 'object',\n    properties: {\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Party Name',\n        notEmpty: true,\n      },\n      personCount: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Person Count',\n        notEmpty: true,\n      },\n      partyTypeId: {\n        type: 'number',\n        ebType: 'select',\n        ebTitle: 'Party Type',\n        ebOptionsUrl: '/test/party/party/types',\n        ebOptionTitleKey: 'name',\n        ebOptionValueKey: 'id',\n        ebOptionsBlankAuto: true,\n        notEmpty: true,\n      },\n    },\n  };\n  // party search\n  schemas.partySearch = {\n    type: 'object',\n    properties: {\n      partyTypeId: {\n        type: 'number',\n        ebType: 'select',\n        ebTitle: 'Party Type',\n        ebOptionsUrl: '/test/party/party/types',\n        ebOptionTitleKey: 'name',\n        ebOptionValueKey: 'id',\n        ebOptionsBlankAuto: true,\n      },\n    },\n  };\n\n  return schemas;\n};\n"],"sourceRoot":""}